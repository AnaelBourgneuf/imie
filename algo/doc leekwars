abs(Nombre number)	:	Nombre result

Renvoie la valeur absolue du nombre number.
Paramètres
number : Le nombre dont la valeur absolue sera calculée.
Retour
result : La valeur absolue du nombre.
6 opérations
acos(Nombre argument)	:	Nombre result

Calcule l'arc cosinus d'argument, dans l'intervalle [0, PI].
Paramètres
argument : Nombre dont l'arc cosinus sera calculé.
Retour
result : L'arc cosinus d'argument.
12 opérations
asin(Nombre argument)	:	Nombre result

Calcule l'arc sinus d'argument, dans l'intervalle [0, PI].
Paramètres
argument : Nombre dont l'arc sinus sera calculé.
Retour
result : L'arc sinus d'argument.
12 opérations
atan(Nombre argument)	:	Nombre result

Calcule l'arc tangente d'argument, dans l'intervalle [0, PI].
Paramètres
argument : Nombre dont l'arc tangente sera calculée.
Retour
result : L'arc tangente d'argument.
25 opérations
atan2(Nombre y , Nombre x)	:	Nombre result

Convertit les coordonnées cartésiennes (x, y) en coordonnées polaires (r, theta). Cette fonction retourne l'angle theta entre -PI et PI en utilisant les signes des arguments.
Paramètres
y : Coordonnée en y.
x : Coordonnée en x.
Retour
result : L'angle theta en coordonnées polaires du point (x, y).
35 opérations
cbrt(Nombre number)	:	Nombre result

Calcule la racine cubique de number
Paramètres
number : Nombre dont on veut calculer la racine cubique.
Retour
result : Racine cubique de number.
62 opérations
ceil(Nombre number)	:	Nombre result

Retourne l'arrondi à l'entier supérieur de number.
Vous pouvez trouver l'arrondi à l'entier inférieur avec floor, et l'arrondi avec round.
Paramètres
number : Nombre dont on veut trouver l'arrondi supérieur.
Retour
result : Arrondi à l'entier supérieur de number.
6 opérations
cos(Nombre angle)	:	Nombre cosine

Calcule le cosinus de angle.
Paramètres
angle : Nombre dont le cosinus sera calculé (en radians).
Retour
cosine : Le cosinus de angle, dans l'intervalle [-1, 1].
30 opérations
exp(Nombre number)	:	Nombre result

Éleve le nombre d'Euler E à la puissance number.
Paramètres
number : L'exposant auquel E sera élevé.
Retour
result : E ** number.
40 opérations
floor(Nombre number)	:	Nombre result

Calcule l'arrondi à l'entier inférieur de number.
Vous pouvez trouver l'arrondi à l'entier supérieur avec ceil, et l'arrondi avec round.
Paramètres
number : Nombre dont on veut trouver l'arrondi inférieur.
Retour
result : Arrondi à l'entier inférieur de number.
6 opérations
hypot(Nombre x , Nombre y)	:	Nombre hypotenuse

Renvoie l'hypoténuse du triangle rectangle de côtés x et y. Équivaut à sqrt(x**2 + y**2).
Paramètres
x : La valeur x.
y : La valeur y.
Retour
hypotenuse : sqrt(x**2 + y**2).
187 opérations
log(Nombre number)	:	Nombre log

Calcule le logarithme néperien du nombre number.
Paramètres
number : Un nombre compris dans l'intervalle ]0; +∞[.
Retour
log : Le logarithme néperien de number.
39 opérations
log10(Nombre number)	:	Nombre log10

Calcule le logarithme en base 10 du nombre number.
Paramètres
number : Un nombre compris dans l'intervalle ]0; +∞[.
Retour
log10 : Le logarithme en base 10 de number.
23 opérations
max(Nombre a , Nombre b)	:	Nombre max

Renvoie le plus grande valeur entre les deux nombres a et b.
Paramètres
a : Un nombre.
b : Un nombre.
Retour
max : Le plus grand nombre entre a et b.
10 opérations
min(Nombre a , Nombre b)	:	Nombre min

Renvoie la plus petite valeur entre les deux nombres a et b.
Paramètres
a : Un nombre.
b : Un nombre.
Retour
min : Le plus petit nombre entre a et b.
10 opérations
number(? value)	:	Nombre number

Convertit une valeur en nombre. Si la valeur est une chaîne, la fonction number va essayer de la convertir en nombre, si la valeur est déjà un nombre, la fonction renvoie le nombre, et pour tout autre type, elle renvoie null.
Paramètres
value : La valeur à convertir en nombre.
Retour
number : Le nombre converti.
20 opérations
pow(Nombre base , Nombre exp)	:	Nombre result

Éleve le nombre base à la puissance exposant.
Paramètres
base : La base.
exp : L'exposant.
Retour
result : base élevée à la puissance exposant.
140 opérations
rand()	:	Nombre number

Renvoie un nombre aléatoire réel, compris entre 0 (inclus) et 1 (exclu).
Retour
number : Un nombre aléatoire dans l'intervalle [0; 1[.
30 opérations
randFloat(Nombre a , Nombre b)	:	Nombre number

Renvoie un nombre aléatoire réel, compris entre a (inclus) et b (exclu).
Paramètres
a : Borne inférieure.
b : Borne supérieure.
Retour
number : Un nombre aléatoire dans l'intervalle [a; b[.
30 opérations
randInt(Nombre a , Nombre b)	:	Nombre number

Renvoie un nombre aléatoire entier, compris entre a (inclus) et b (exclu).
Paramètres
a : Borne inférieure.
b : Borne supérieure.
Retour
number : Un nombre entier aléatoire dans l'intervalle [a; b[.
30 opérations
round(Nombre number)	:	Nombre number

Retourne l'arrondi de number.
Vous pouvez trouver l'arrondi à l'entier inférieur avec floor, et l'arrondi à l'entier supérieur avec ceil.
Paramètres
number : Nombre dont on veut trouver l'arrondi.
Retour
number : Arrondi de number.
6 opérations
signum(Nombre number)	:	Nombre sign

Détermine le signe du nombre number.
Paramètres
number : Le nombre dont le signe sera déterminé.
Retour
sign : 1 si le nombre est positif, 0 si le nombre est nul et -1 si le nombre est négatif.
8 opérations
sin(Nombre angle)	:	Nombre sine

Calcule le sinus de l'angle angle passé en paramètre
Paramètres
angle : L'angle dont le sinus sera calculé
Retour
sine : Retourne le sinus de l'angle angle
30 opérations
sqrt(Nombre number)	:	Nombre root

Calcule la racine carrée du nombre number.
Paramètres
number : Nombre dont la racine sera calculée.
Retour
root : Racine carrée de number.
8 opérations
tan(Nombre angle)	:	Nombre tangent

Calcule la tangente de l'angle angle (en radians).
Paramètres
angle : Angle en radians.
Retour
tangent : Tangente de angle.
30 opérations
toDegrees(Nombre radians)	:	Nombre degrees

Convertit l'angle radians en degrés.
Paramètres
radians : Valeur en radians
Retour
degrees : Angle en degrés.
1 opérations
toRadians(Nombre degrees)	:	Nombre radians

Convertit l'angle degrees en radians.
Paramètres
degrees : Valeur en degrés
Retour
radians : Angle en radians.
31 opérations
E

Nombre d'Euler.
Valeur
E = 2.71828182846
PI

Le rapport de la circonférence d’un cercle à son diamètre.
Valeur
PI = 3.14159265359
charAt(Chaîne string , Nombre position)	:	Chaîne char

Retourne le caractère de la chaîne string situé à la position position.
Le premier caractère de la chaîne se trouve à la position 0.
Paramètres
string : Chaîne dont on veut récupérer un caractère.
position : Position du caractère à trouver.
Retour
char : chaîne contenant le caractère recherché, ou une chaîne vide si la position est invalide.
8 opérations
contains(Chaîne string , Chaîne search)	:	Booléen contains

Détermine si une chaîne search se trouve dans une chaîne string.
Paramètres
string : Chaîne dans laquelle la recherche sera effectuée.
search : Chaîne à rechercher.
Retour
contains : true si search est dans string, false sinon.
Opérations
variables
endsWith(Chaîne string , Chaîne suffix)	:	Booléen endsWith

Détermine si une chaîne string se termine par une chaîne suffix.
Paramètres
string : Chaîne dans laquelle la recherche sera effectuée
suffix : Suffixe à rechercher
Retour
endsWith : true si string se termine par suffix
Opérations
variables
indexOf(Chaîne string , Chaîne search)	:	Nombre index

Détermine la position de la première occurrence de la chaîne search dans la chaîne string.
Paramètres
string : La chaîne où la recherche sera effectuée.
search : La chaîne à rechercher.
Retour
index : La position de la première occurrence de search dans string, -1 si la chaîne n'a pas été trouvée.
Opérations
variables
indexOf(Chaîne string , Chaîne search , Nombre start)	:	Nombre index

Détermine la position de la première occurrence de la chaîne search dans la chaîne string, à partir de la position start.
Paramètres
string : La chaîne où la recherche sera effectuée.
search : La chaîne à rechercher.
start : La position de départ de la recherche.
Retour
index : La position de la première occurrence de search dans string à partir de start, -1 si la chaîne n'a pas été trouvée.
Opérations
variables
length(Chaîne string)	:	Nombre length

Renvoie la longueur de la chaîne string.
Paramètres
string : La chaîne dont la longueur sera retournée.
Retour
length : La longueur de la chaîne string.
15 opérations
replace(Chaîne string , Chaîne search , Chaîne replace)	:	Chaîne string

Remplace toutes les occurrences de search par replace dans la chaîne string.
Paramètres
string : Chaîne dans laquelle les remplacements sont effectués.
search : Sous-chaîne à remplacer.
replace : Chaîne de remplacement.
Retour
string : La chaîne résultat, avec les remplacements.
Opérations
variables
split(Chaîne string , Chaîne delimiter)	:	TableauDeChaînes parts

Découpe la chaîne string sous-chaînes en délimitées par delimiter.
Paramètres
string : Chaîne à découper.
delimiter : Chaîne délimitant le passage d'un élément à un autre.
Retour
parts : Tableau contenant les sous-chaînes trouvées.
Opérations
variables
split(Chaîne string , Chaîne delimiter , Nombre limit)	:	TableauDeChaînes parts

Découpe la chaîne string sous-chaînes en délimitées par delimiter.
Paramètres
string : Chaîne à découper.
delimiter : Chaîne délimitant le passage d'un élément à un autre.
limit : Nombre d'éléments maximum du tableau.
Retour
parts : Tableau contenant les sous-chaînes trouvées.
Opérations
variables
startsWith(Chaîne string , Chaîne prefix)	:	Booléen startsWith

Vérifie si la chaîne string commence par la chaîne prefix.
Paramètres
string : Chaîne de recherche.
prefix : Préfixe recherché.
Retour
startsWith : Vrai si la string commence par prefix.
Opérations
variables
string(? value)	:	Chaîne string

Convertit une valeur en chaîne de caractères.
Si la valeur est déjà une chaîne, elle est renvoyée.
Si la valeur est nombre x, "x" est renvoyé.
Si la valeur est un tableau, une chaîne sous la forme "[clé1 : valeur1, clé2 : valeur2, ...]" est renvoyée.
Si la valeur est un booléen, "true" et "false" sont respectivement renvoyées pour les valeurs true et false.
Si la valeur est null, "null" est renvoyée.
Paramètres
value : La valeur à convertir en chaîne de caractères.
Retour
string : La chaîne convertie.
8 opérations
substring(Chaîne string , Nombre start)	:	Chaîne string

Retourne la sous-chaîne de la chaîne string à partir du caractère à l'indice start.
Paramètres
string : Chaîne source.
start : Indice du caractère de départ.
Retour
string : Sous-chaîne.
Opérations
variables
substring(Chaîne string , Nombre start , Nombre length)	:	Chaîne string

Retourne la sous-chaîne de la chaîne string à partir du caractère à l'indice start et de taille length.
Paramètres
string : Chaîne à découper.
start : Indice du caractère de départ.
length : Longueur de la sous-chaîne.
Retour
string : Sous-chaîne.
Opérations
variables
toLower(Chaîne string)	:	Chaîne string

Convertit les caractères majuscules de la chaîne string en minuscules.
Paramètres
string : Chaîne à transformer
Retour
string : Chaîne en minuscules
Opérations
variables
toUpper(Chaîne string)	:	Chaîne string

Convertit les caractères minuscules de la chaîne string par des majuscules.
Paramètres
string : Chaîne à transformer.
Retour
string : Chaîne en majuscules.
Opérations
variables
arrayConcat(Tableau array1 , Tableau array2)	:	Tableau newArray

Ajoute les deux tableaux bout à bout. Les clés textuelles sont conservées et toutes les clés numériques sont réindexées.
Paramètres
array1 : Premier tableau.
array2 : Second tableau.
Retour
newArray : Somme des deux tableaux.
Opérations
variables
arrayFilter(Tableau array , Fonction  callback)	:	Tableau newArray

Retourne un nouveau tableau contenant tous les couples clé/valeur du tableau source pour lesquels la fonction callback a renvoyé true. Si la fonction callback prend un paramètre, c'est la valeur du tableau source qui sera envoyée, si elle prend deux paramètres c'est la clé et la valeur qui seront envoyées.
Paramètres
array : Tableau d'origine.
callback : Fonction appelée pour chaque élément.
Retour
newArray : Nouveau tableau.
Opérations
variables
arrayFlatten(Tableau array)	:	Tableau newArray

Retourne un nouveau tableau contenant tous les éléments du tableau source. Tous les éléments contenus dans un sous tableau sont extraits dans le nouveau tableau.
1
2
var tableau = [1, 2, [3, 4], 5, [6]];
debug(arrayFlatten(tableau)); // [1,2,3,4,5,6]
Paramètres
array : Tableau d'origine.
Retour
newArray : Nouveau tableau
Opérations
variables
arrayFlatten(Tableau array , Nombre depth)	:	Tableau newArray

Retourne un nouveau tableau contenant tous les éléments du tableau source. Tous les éléments contenus dans un sous tableau sont extraits dans le nouveau tableau.L'argument depth détermine la profondeur maximale de sous tableau à extraire.
1
2
var tableau = [1, 2, [3, 4], 5, [6]];
debug(arrayFlatten(tableau)); // [1,2,3,4,5,6]
Paramètres
array : Tableau d'origine.
depth : Profondeur maximale.
Retour
newArray : Nouveau tableau.
Opérations
variables
arrayFoldLeft(Tableau array , Fonction  f , ? v0)	:	? result

Réduit le tableau array [v1, v2, ..., vn] par la gauche en partant de la valeur v0 et en appliquant la fonction f. Équivaut à :
1
f(f(f(v0, v1), v2), ...)
Paramètres
array : Tableau d'origine.
f : Fonction à appliquer.
v0 : Valeur de départ.
Retour
result : Tableau réduit.
Opérations
variables
arrayFoldRight(Tableau array , Fonction  f , ? v0)	:	? result

Réduit le tableau array [v1, v2, ..., vn] par la droite en partant de la valeur v0 et en appliquant la fonction f. Équivaut à :
1
f(v0, f(v1, f(v2, ...))).
Paramètres
array : Tableau d'origine.
f : Fonction à appliquer.
v0 : Valeur de départ.
Retour
result : Tableau réduit.
Opérations
variables
arrayIter(Tableau array , Fonction  callback)

Appelle la fonction callback pour chaque élément du tableau. Si la fonction callback prend un paramètre, c'est la valeur du tableau source qui sera envoyée, si elle prend deux paramètres c'est la clé et la valeur qui seront envoyées.
Paramètres
array : Tableau d'origine.
callback : Fonction appelée pour chaque élément.
Opérations
variables
arrayMap(Tableau array , Fonction  callback)	:	Tableau newArray

Retourne un nouveau tableau contenant pour chaque clé du tableau source, la valeur retournée par la fonction callback. Si la fonction callback prend un paramètre, c'est la valeur du tableau source qui sera envoyée, si elle prend deux paramètres c'est la clé et la valeur qui seront envoyées.
Paramètres
array : Tableau d'origine.
callback : Fonction appelée pour chaque élément.
Retour
newArray : Nouveau tableau.
Opérations
variables
arrayMax(Tableau array)	:	? element

Retourne l'élément de valeur maximale du tableau array.
Pour plus d'informations sur la valeur maximale d'un tableau voir sort.
Paramètres
array : Tableau dans lequel sera recherchée la valeur maximale.
Retour
element : Elément de valeur maximale.
Opérations
variables
arrayMin(Tableau array)	:	? element

Retourne l'élément de valeur minimale du tableau array.
Pour plus d'informations sur la valeur minimale d'un tableau voir sort.
Paramètres
array : Tableau dans lequel sera recherchée la valeur minimale.
Retour
element : Elément de valeur minimale.
Opérations
variables
arrayPartition(Tableau array , Fonction  callback)	:	TableauDeTableaux new_array

Retourne un nouveau tableau contenant deux listes, dans la première se trouvent tous les couples clés/valeurs pour lesquels la fonction callback a renvoyé true, dans la seconde se trouvent tous les autres. Si la fonction callback prend un paramètre, c'est la valeur du tableau source qui sera envoyée, si elle prend deux paramètres c'est la clé et la valeur qui seront envoyées.
Paramètres
array : Tableau d'origine.
callback : Fonction appelée pour chaque élément.
Retour
new_array : Nouveau tableau.
Opérations
variables
arraySort(Tableau array , Fonction  callback)	:	Tableau sortedArray

Trie le tableau selon l'ordre définit par la fonction callback. Les éléments sont comparés deux à deux, la fonction callback doit renvoyer les valeurs -1, 0 ou 1 selon si la premiere valeur est avant, au même niveau ou après la seconde valeur. Si la fonction callback prend 2 paramètre, ce sont les deux valeurs qui sont envoyées, si elle en prend 4, ce sont les couples clé/valeur qui sont envoyés.
Paramètres
array : Tableau d'origine
callback : Fonction de tri.
Retour
sortedArray : Le tableau trié
Opérations
variables
assocSort(Tableau array)

Trie le tableau array en conservant l'association clé : valeur.
Paramètres
array : Le tableau à trier.
Opérations
variables
assocSort(Tableau array , Nombre order)

Trie le tableau array en conservant l'association clé : valeur selon l'order order.
Paramètres
array : Le tableau à trier.
order : L'ordre de tri : SORT_ASC ou SORT_DESC.
Opérations
variables
average(TableauDeNombres array)	:	Nombre averageValue

Calcule la moyenne des éléments contenus dans le tableau array.
Paramètres
array : Tableau dont on veut calculer la moyenne.
Retour
averageValue : Valeur moyenne.
Opérations
variables
count(Tableau array)	:	Nombre numberOfElements

Compte le nombre d'éléments du tableau array.
Paramètres
array : Tableau dont le nombre d'éléments sera compté.
Retour
numberOfElements : Nombre d'éléments du tableau.
5 opérations
fill(Tableau array , ? value)

Remplit le tableau array en remplaçant chaque élément déjà existant par value.
Paramètres
array : Le tableau à remplir.
value : La valeur pour chaque case du tableau.
Opérations
variables
fill(Tableau array , ? value , Nombre size)

Redimensionne le tableau array à la taille size et remplit toutes ses cases avec value.
Paramètres
array : Le tableau à remplir.
value : La valeur pour chaque case du tableau.
size : Le nombre de cases.
Opérations
variables
inArray(Tableau array , ? element)	:	Booléen inArray

Détermine si l'élément element est dans le tableau array.
Paramètres
array : Le tableau de recherche.
element : L'élément à rechercher.
Retour
inArray : vrai si l'élément est dans le tableau, faux sinon.
Opérations
variables
insert(Tableau array , ? element , Nombre position)

Insère un élément element dans le tableau array à la position position.
Paramètres
array : Le tableau où l'élément sera inséré.
element : L'élément à insérer.
position : La position de l'insertion.
Opérations
variables
isEmpty(Tableau array)	:	Booléen empty

Détermine si le tableau array est vide. Équivalent à count(array) == 0.
Paramètres
array : Le tableau à tester.
Retour
empty : vrai si le tableau est vide, faux sinon.
10 opérations
join(Tableau array , Chaîne glue)	:	Chaîne string

Fusionne plusieurs éléments en une chaîne de caractères, en les séparant par un délimiteur glue.
Paramètres
array : Un tableau d'éléments à fusionner.
glue : Le délimiteur des éléments.
Retour
string : La chaîne de caractère résultante de la fusion.
Opérations
variables
keySort(Tableau array)

Trie le tableau array selon les clés.
Paramètres
array : Le tableau à trier.
Opérations
variables
keySort(Tableau array , Nombre order)

Trie le tableau array selon les clés selon l'ordre order.
Paramètres
array : Le tableau à trier.
order : L'ordre de tri : SORT_ASC ou SORT_DESC.
Opérations
variables
pop(Tableau array)	:	? element

Supprime la dernière case du tableau array et renvoie l'élément correspondant.
Paramètres
array : Le tableau dont la dernière case sera supprimée.
Retour
element : L'élément qui était dans l'ancienne dernière case.
Opérations
variables
push(Tableau array , ? element)

Ajoute l'élément element à la fin du tableau array.
Paramètres
array : Le tableau où l'on veut ajouter l'élément.
element : L'élément à ajouter.
Opérations
variables
pushAll(Tableau array , Tableau elements)

Ajoute tous les éléments du tableau elements à la fin du tableau array.
Paramètres
array : Le tableau où l'on veut ajouter les éléments.
elements : Les éléments à ajouter.
Opérations
variables
remove(Tableau array , Nombre position)	:	? element

Supprime un élément du tableau array à la position position, et retourne l'élément supprimé.
Paramètres
array : Tableau dont on veut supprimer un élément.
position : Position de l'élément à supprimer.
Retour
element : L'élément enlevé du tableau.
Opérations
variables
removeElement(Tableau array , ? element)

Supprime la première occurrence d'un élément element dans le tableau array. Si l'élement n'est pas trouvé, le tableau n'est pas modifié.
Paramètres
array : Tableau dont on veut supprimer un élément.
element : Élement à rechercher puis à supprimer.
Opérations
variables
removeKey(Tableau array , ? key)

Supprime un élément du tableau array associé à la clé key.
Paramètres
array : Tableau dont on veut supprimer un élément.
key : La clé associée à l'élément à supprimer.
Opérations
variables
reverse(Tableau array)

Inverse le tableau array.
Paramètres
array : Tableau à inverser.
Opérations
variables
search(Tableau array , ? element)	:	Nombre pos

Recherche l'élément element dans le tableau array.
Paramètres
array : Le tableau de recherche.
element : L'élément à rechercher.
Retour
pos : La position de la première occurrence de l'élément dans le tableau, null si l'élément n'a pas été trouvé.
Opérations
variables
search(Tableau array , ? element , Nombre start)	:	Nombre pos

Recherche l'élément element dans le tableau array, à partir de la position start.
Paramètres
array : Le tableau de recherche.
element : L'élément à rechercher.
start : La position du début de la recherche.
Retour
pos : La position de la première occurrence de l'élément element dans le tableau array, à partir de start, null si l'élément n'a pas été trouvé.
Opérations
variables
shift(Tableau array)	:	? element

Supprime la première case du tableau array et renvoie l'élément correspondant.
Paramètres
array : Le tableau dont la première case sera supprimée.
Retour
element : L'élément qui était dans l'ancienne première case.
Opérations
variables
shuffle(Tableau array)

Mélange un tableau de manière aléatoire.
Paramètres
array : Le tableau à mélanger.
Opérations
variables
sort(Tableau array)

Trie le tableau array selon l'ordre suivant :
Tous les booléens (d'abord faux puis vrais)
Tous les nombres (classés du plus petit au plus grand)
Toutes les chaînes (dans l'ordre alphabétique)
Tous les éléments null.
Paramètres
array : Tableau à trier.
Opérations
variables
sort(Tableau array , Nombre order)

Trie le tableau array par ordre croissant ou décroissant. Voir sort pour l'ordre de tri.
Paramètres
array : Tableau à trier.
order : SORT_ASC pour trier array dans l'ordre croissant ou SORT_DESC pour le trier dans l'ordre décroissant.
Opérations
variables
subArray(Tableau array , Nombre start , Nombre end)	:	Tableau array

Retourne un sous-tableau de array commençant à la position start et finissant à la position end.
Paramètres
array : Tableau source.
start : Indice de départ.
end : Indice de fin.
Retour
array : Sous-tableau.
Opérations
variables
sum(TableauDeNombres array)	:	Nombre sum

Retourne la somme de tous les éléments numériques du tableau array.
Paramètres
array : Tableau à sommer.
Retour
sum : Somme des éléments du tableau.
Opérations
variables
unshift(Tableau array , ? element)

Ajoute l'élément element au début du tableau array.
Paramètres
array : Tableau dans lequel l'élément sera ajouté.
element : Element à ajouter.
Opérations
variables
SORT_ASC

Indique à la fonction sort un tri dans l'ordre croissant.
Valeur
SORT_ASC = 0
SORT_DESC

Indique à la fonction sort un tri dans l'ordre décroissant.
Valeur
SORT_DESC = 1
getAbsoluteShield()	:	Nombre shield

Retourne le bouclier absolu de votre poireau.
Retour
shield : Le bouclier absolu de votre poireau.
15 opérations
getAbsoluteShield(Nombre leek)	:	Nombre shield

Retourne le bouclier absolu du poireau d'id leek. Pour récupérer directement le bouclier absolu de votre poireau, utilisez getAbsoluteShield() sans paramètre.
Paramètres
leek : L'id du poireau dont le bouclier absolu sera retourné.
Retour
shield : Le bouclier absolu du poireau leek.
15 opérations
getAgility()	:	Nombre agility

Retourne l'agilité de votre poireau.
Retour
agility : L'agilité de votre poireau.
15 opérations
getAgility(Nombre leek)	:	Nombre agility

Retourne l'agilité du poireau d'id leek. Pour récupérer directement l'agilité de votre poireau, utilisez getAgility() sans paramètre.
Paramètres
leek : L'id du poireau dont l'agilité sera retournée.
Retour
agility : L'agilité du poireau leek.
15 opérations
getAIID()	:	Nombre id

Renvoie l'id de votre IA.
Retour
id : L'id de votre IA.
15 opérations
getAIID(Nombre leek)	:	Nombre id

Renvoie l'id de l'IA du poireau leek.
Paramètres
leek : L'id du poireau dont l'id d'IA sera renvoyé.
Retour
id : L'id de l'IA du poireau leek.
15 opérations
getAIName()	:	Chaîne name

Renvoie le nom de votre IA.
Retour
name : Le nom de votre IA.
15 opérations
getAIName(Nombre leek)	:	Chaîne name

Renvoie le nom de l'IA du poireau leek.
Paramètres
leek : L'id du poireau dont le nom d'IA sera renvoyé.
Retour
name : Le nom de l'IA du poireau leek.
15 opérations
getBirthTurn()	:	Nombre turn

Renvoie le numéro du tour de combat ou vous êtes apparu. Renvoie 1 si vous êtes un poireau par exemple, et 5 si vous êtes une invocation invoquée au tour 5.
Retour
turn : Le tour du combat où vous êtes apparu.
15 opérations
getBirthTurn(Nombre entity)	:	Nombre turn

Renvoie le tour du combat où est apparue l'entité entity. Renvoie 1 s'il s'agit d'un poireau par exemple, et 5 s'il d'agit d'une invocation invoquée au tour 5.
Paramètres
entity : L'id de l'entité dont le tour d'apparition sera renvoyé.
Retour
turn : Le tour de combat où entity est apparue.
15 opérations
getCell()	:	Nombre cell

Retourne la cellule où se trouve votre poireau.
Retour
cell : Le numéro de la cellule où se trouve votre poireau.
5 opérations
getCell(Nombre leek)	:	Nombre cell

Retourne la cellule où se trouve le poireau d'id leek.
Paramètres
leek : L'id du poireau dont la cellule sera retournée.
Retour
cell : Le numéro de la cellule où se trouve le poireau leek.
5 opérations
getChips()	:	TableauDeNombres chips

Renvoie les puces de votre poireau.
Retour
chips : Un tableau contenant les ids des puces de votre poireau.
40 opérations
getChips(Nombre leek)	:	TableauDeNombres chips

Renvoie les puces du poireau d'id leek.
Paramètres
leek : L'id du poireau dont les puces seront renvoyées.
Retour
chips : Un tableau contenant les ids des puces du poireau leek.
40 opérations
getCores()	:	Nombre cores

Cette fonction est dépréciée.
Renvoie le nombre de coeurs de votre poireau.
Retour
cores : Le nombre de coeurs de votre poireau.
15 opérations
getCores(Nombre leek)	:	Nombre cores

Cette fonction est dépréciée.
Renvoie le nombre de coeurs du poireau d'id leek.
Paramètres
leek : Le poireau dont le nombre de coeurs sera retournée.
Retour
cores : Le nombre de coeurs du poireau leek.
15 opérations
getDamageReturn()	:	Nombre damageReturn

Retourne le taux de renvoi de dommages de votre poireau.
Retour
damageReturn : Le taux de renvoi de dommages de votre poireau (en %).
15 opérations
getDamageReturn(Nombre leek)	:	Nombre damageReturn

Retourne le taux de renvoi de dommages de l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont le renvoi de dommages sera retourné.
Retour
damageReturn : Le taux de renvoi de dommages de l'entité d'id leek (en %).
15 opérations
getEffects()	:	TableauDeTableaux effects

Retourne la liste des effets de votre poireau.
Retour
effects : La liste des effets de votre poireau. Voir getEffects(leek) pour le détail sur le retour.
25 opérations
getEffects(Nombre leek)	:	TableauDeTableaux effects

Retourne la liste des effets du poireau d'id leek. Pour récupérer directement la liste des effets de votre poireau, utilisez getEffects() sans paramètre.
Paramètres
leek : L'id du poireau dont la liste des effets sera retourné.
Retour
effects : La liste des effets actuellement présents sur le poireau leek. La liste des effets est un tableau contenant les effets. Un effet est lui-même un tableau de 7 cases de la forme : [type, value, caster_id, turns, critical, item_id, target_id], où type est le type de l'effet parmi :
EFFECT_DAMAGE, value est le nombre de dégâts
EFFECT_HEAL, value est le nombre de PV soignés
EFFECT_BUFF_FORCE, value est la force gagnée
EFFECT_BUFF_AGILITY, value est l'agilité gagnée
EFFECT_BUFF_TP, value est le nombre de PT gagnés
EFFECT_BUFF_MP, value est le nombre de PM gagnés
EFFECT_ABSOLUTE_SHIELD, value est le bouclier absolu gagné
EFFECT_RELATIVE_SHIELD, value est le bouclier relatif gagné
EFFECT_DEBUFF, indique un débuff, value ne représente rien dans ce cas.
etc.
25 opérations
getEntityTurnOrder()	:	Nombre turnOrder

Retourne une valeur entre 1 et n (nombre d'entités actuellement en jeu) indiquant la position de l'entité actuelle dans l'ordre de jeu.
Retour
turnOrder : Place dans l'ordre de jeu.
30 opérations
getEntityTurnOrder(Nombre entity)	:	Nombre turnOrder

Retourne une valeur entre 1 et n (nombre d'entités actuellement en jeu) indiquant la position de l'entité entity dans l'ordre de jeu.
Paramètres
entity : L'id de l'entité dont l'ordre de jeu sera renvoyé
Retour
turnOrder : Place dans l'ordre de jeu de l'entité entity
30 opérations
getFarmerCountry()	:	Chaîne country

Renvoie votre pays.
Retour
country : Votre pays, ou "?" si non indiqué.
15 opérations
getFarmerCountry(Nombre leek)	:	Chaîne country

Renvoie le pays de l'éleveur du poireau leek.
Paramètres
leek : L'id du poireau dont le pays de d'éleveur sera renvoyé.
Retour
country : Le pays de l'éleveur du poireau leek, ou "?" si non indiqué.
15 opérations
getFarmerID()	:	Nombre id

Renvoie votre id d'éleveur.
Retour
id : L'id de votre éleveur.
15 opérations
getFarmerID(Nombre leek)	:	Nombre id

Renvoie l'id de l'éleveur du poireau leek.
Paramètres
leek : L'id du poireau dont l'id d'éleveur sera renvoyé.
Retour
id : L'id de l'éleveur du poireau leek.
15 opérations
getFarmerName()	:	Chaîne name

Renvoie le nom de votre éleveur.
Retour
name : Le nom de votre éleveur.
15 opérations
getFarmerName(Nombre leek)	:	Chaîne name

Renvoie le nom de l'éleveur du poireau leek.
Paramètres
leek : L'id du poireau dont le nom d'éleveur sera renvoyé.
Retour
name : Le nom de de l'éleveur du poireau leek.
15 opérations
getForce()	:	Nombre force

Cette fonction est dépréciée.
Renvoie la force de votre poireau.
Retour
force : La force de votre poireau.
15 opérations
getForce(Nombre leek)	:	Nombre force

Cette fonction est dépréciée.
Renvoie la force du poireau d'id leek.
Paramètres
leek : Le poireau dont la force sera retournée.
Retour
force : La force du poireau leek.
15 opérations
getFrequency()	:	Nombre frequency

Renvoie la fréquence de votre poireau.
Retour
frequency : La fréquence de votre poireau.
15 opérations
getFrequency(Nombre leek)	:	Nombre frequency

Renvoie la fréquence du poireau d'id leek.
Paramètres
leek : Le poireau dont la fréquence sera retournée.
Retour
frequency : La fréquence du poireau leek.
15 opérations
getLaunchedEffects()	:	TableauDeTableaux effects

Renvoie la liste des effets qu'a provoqué votre poireau.
Retour
effects : Un tableau contenant les effets provoqués par votre poireau, de la même forme que le tableau renvoyé par getEffects.
25 opérations
getLaunchedEffects(Nombre leek)	:	TableauDeTableaux effects

Renvoie la liste des effets qu'a provoqué l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont la liste des effets provoqués sera retournée.
Retour
effects : La liste des effets provoqués l'entité d'id leek, de la même forme que le tableau renvoyé par getEffects.
25 opérations
getLeek()	:	Nombre leek

Renvoie l'id de votre poireau.
Retour
leek : L'id de votre poireau.
5 opérations
getLeekID()	:	Nombre realID

Renvoie l'id réel de votre poireau.
Retour
realID : L'id réel de votre poireau.
15 opérations
getLeekID(Nombre leek)	:	Nombre realID

Renvoie l'id réel du poireau d'id leek.
Paramètres
leek : L'id du poireau dont l'id réel sera retourné.
Retour
realID : L'id réel du poireau leek.
15 opérations
getLevel()	:	Nombre level

Renvoie le niveau de votre poireau.
Retour
level : Le niveau de votre poireau.
15 opérations
getLevel(Nombre leek)	:	Nombre level

Renvoie le niveau du poireau d'id leek.
Paramètres
leek : L'id du poireau dont le niveau sera renvoyé.
Retour
level : Le niveau du poireau d'id leek.
15 opérations
getLife()	:	Nombre life

Renvoie la vie actuelle de votre poireau.
Retour
life : La vie de votre poireau.
15 opérations
getLife(Nombre leek)	:	Nombre life

Renvoie la vie actuelle du poireau d'id leek.
Paramètres
leek : L'id du poireau dont la vie sera renvoyée.
Retour
life : La vie actuelle du poireau leek.
15 opérations
getMagic()	:	Nombre magic

Renvoie la magie de votre poireau.
Retour
magic : La magie de votre poireau.
15 opérations
getMagic(Nombre leek)	:	Nombre magic

Renvoie la magie de l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont la magie sera retournée.
Retour
magic : La magie de l'entité d'id leek.
15 opérations
getMP()	:	Nombre mp

Revoie le nombre de points de mouvements actuel de votre poireau.
Retour
mp : Le nombre de PM de votre poireau.
15 opérations
getMP(Nombre leek)	:	Nombre mp

Revoie le nombre de points de mouvements actuel du poireau leek.
Paramètres
leek : L'id du poireau dont le nombre de PM sera renvoyé.
Retour
mp : Le nombre de PM du poireau leek.
15 opérations
getName()	:	Chaîne name

Renvoie le nom de votre poireau.
Retour
name : Le nom de votre poireau.
15 opérations
getName(Nombre leek)	:	Chaîne name

Renvoie le nom du poireau d'id leek.
Paramètres
leek : L'id du poireau dont le nom sera renvoyé.
Retour
name : Le nom du poireau leek.
15 opérations
getRelativeShield()	:	Nombre shield

Retourne le bouclier relatif de votre poireau.
Retour
shield : Le bouclier relatif de votre poireau, un nombre entier entre 0 et 100.
15 opérations
getRelativeShield(Nombre leek)	:	Nombre shield

Retourne le bouclier relatif du poireau d'id leek. Pour récupérer directement le bouclier relatif de votre poireau, utilisez getRelativeShield() sans paramètre.
Paramètres
leek : L'id du poireau dont le bouclier relatif sera retourné.
Retour
shield : Le bouclier relatif du poireau leek, un nombre entier entre 0 et 100.
15 opérations
getResistance()	:	Nombre resistance

Renvoie la résistance de votre poireau.
Retour
resistance : La résistance de votre poireau.
15 opérations
getResistance(Nombre leek)	:	Nombre resistance

Renvoie la résistance de l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont la résistance sera retournée.
Retour
resistance : La résistance de l'entité d'id leek.
15 opérations
getScience()	:	Nombre science

Renvoie la science de votre poireau.
Retour
science : La science de votre poireau.
15 opérations
getScience(Nombre leek)	:	Nombre science

Renvoie la science de l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont la science sera retournée.
Retour
science : La science de l'entité d'id leek.
15 opérations
getStrength()	:	Nombre strength

Renvoie la force de votre poireau.
Retour
strength : La force de votre poireau.
15 opérations
getStrength(Nombre leek)	:	Nombre strength

Renvoie la force du poireau d'id leek.
Paramètres
leek : Le poireau dont la force sera retournée.
Retour
strength : La force du poireau leek.
15 opérations
getSummoner()	:	Nombre summoner

Renvoie l'entité qui vous a invoqué, si vous êtes une invocation.
Retour
summoner : L'id de l'entité qui vous a invoqué si vous êtes une invocation, null sinon.
15 opérations
getSummoner(Nombre entity)	:	Nombre summoner

Renvoie l'entité a invoqué l'entité entity, s'il s'agit d'une invocation.
Paramètres
entity : L'id de l'entité dont l'invocateur sera renvoyé.
Retour
summoner : L'id de l'entité a invoqué entity s'il s'agit d'une invocation, null sinon.
15 opérations
getTeamID()	:	Nombre id

Renvoie l'id de votre équipe.
Retour
id : L'id de votre équipe.
15 opérations
getTeamID(Nombre leek)	:	Nombre id

Renvoie l'id de l'équipe du poireau leek.
Paramètres
leek : L'id du poireau dont l'id d'équipe sera renvoyé.
Retour
id : L'id de l'équipe du poireau leek.
15 opérations
getTeamName()	:	Chaîne name

Renvoie le nom de votre équipe.
Retour
name : Le nom de votre équipe.
15 opérations
getTeamName(Nombre leek)	:	Chaîne name

Renvoie le nom de l'équipe du poireau leek.
Paramètres
leek : L'id du poireau dont le nom d'équipe sera renvoyé.
Retour
name : Le nom de l'équipe du poireau leek.
15 opérations
getTotalLife()	:	Nombre life

Renvoie la vie totale de votre poireau.
Retour
life : La vie totale de votre poireau.
15 opérations
getTotalLife(Nombre leek)	:	Nombre life

Renvoie la vie totale du poireau d'id leek.
Paramètres
leek : L'id du poireau dont la vie totale sera retournée.
Retour
life : La vie totale du poireau.
15 opérations
getTotalMP()	:	Nombre totalMP

Renvoie le nombre maximal de points de mouvement de votre poireau.
Retour
totalMP : Le nombre maximal de points de mouvement de votre poireau.
15 opérations
getTotalMP(Nombre leek)	:	Nombre totalMP

Renvoie le nombre maximal de points de mouvement de l'entité leek.
Paramètres
leek : L'id de l'entité dont le le nombre maximal de points de mouvement sera retourné.
Retour
totalMP : Le nombre maximal de points de mouvement de l'entité leek.
15 opérations
getTotalTP()	:	Nombre totalTP

Renvoie le nombre maximal de points de tour de votre poireau.
Retour
totalTP : Le nombre maximal de points de tour de votre poireau.
15 opérations
getTotalTP(Nombre leek)	:	Nombre totalTP

Renvoie le nombre maximal de points de tour de l'entité leek.
Paramètres
leek : L'id de l'entité dont le le nombre maximal de points de tour sera retourné.
Retour
totalTP : Le nombre maximal de points de tour de l'entité leek.
15 opérations
getTP()	:	Nombre tp

Renvoie le nombre de points de tour de votre poireau.
Retour
tp : Le nombre de PT de votre poireau.
15 opérations
getTP(Nombre leek)	:	Nombre tp

Renvoie le nombre de points de tour du poireau leek.
Paramètres
leek : L'id du poireau dont les PT seront renvoyés.
Retour
tp : Le nombre de PT du poireau leek.
15 opérations
getType()	:	Nombre type

Renvoie votre type d'entité.
Retour
type : Votre type d'entité :
ENTITY_LEEK si vous êtes un poireau.
ENTITY_BULB si vous êtes un bulbe
15 opérations
getType(Nombre entity)	:	Nombre type

Renvoie le type d'entité de l'entité entity.
Paramètres
entity : L'id de l'entité dont le type sera renvoyé.
Retour
type : Le type d'entité de entity :
ENTITY_LEEK s'il s'agit d'un poireau.
ENTITY_BULB s'il s'agit d'un bulbe
15 opérations
getWeapon()	:	Nombre weapon

Renvoie l'arme actuellement équipée sur votre poireau.
Retour
weapon : L'id de l'arme actuellement équipée sur votre poireau, null si votre poireau n'a pas d'arme équipée.
15 opérations
getWeapon(Nombre leek)	:	Nombre weapon

Renvoie l'arme actuellement équipée le poireau leek.
Paramètres
leek : L'id du poireau dont l'arme actuelle sera renvoyée.
Retour
weapon : L'id de l'arme actuellement équipée le poireau leek, null si le poireau n'a pas d'arme équipée ou si le poireau n'existe pas.
15 opérations
getWeapons()	:	TableauDeNombres weapons

Renvoie les armes de votre poireau.
Retour
weapons : Un tableau contenant les ids des armes de votre poireau.
50 opérations
getWeapons(Nombre leek)	:	TableauDeNombres weapon

Renvoie les armes du poireau d'id leek.
Paramètres
leek : L'id du poireau dont les armes seront renvoyées.
Retour
weapon : Un tableau contenant les ids des armes du poireau leek.
50 opérations
getWisdom()	:	Nombre wisdom

Renvoie la sagesse de votre poireau.
Retour
wisdom : La sagesse de votre poireau.
15 opérations
getWisdom(Nombre leek)	:	Nombre wisdom

Renvoie la sagesse de l'entité d'id leek.
Paramètres
leek : L'id de l'entité dont la sagesse sera retournée.
Retour
wisdom : La sagesse de l'entité d'id leek.
15 opérations
isAlive(Nombre leek)	:	Booléen alive

Détermine si un poireau leek est vivant. Équivalent à getLife(leek) > 0.
Paramètres
leek : L'id du poireau à tester.
Retour
alive : vrai si le poireau leek est vivant, faux s'il est mort.
15 opérations
isAlly(Nombre leek)	:	Booléen isAlly

Détermine si le poireau leek est votre allié.
Paramètres
leek : L'id du poireau à tester.
Retour
isAlly : vrai si le poireau leek est votre allié ou bien vous-même, faux s'il s'agit d'un ennemi.
15 opérations
isDead(Nombre leek)	:	Booléen dead

Détermine si le poireau leek est mort. Équivalent à getLife(leek) == 0.
Paramètres
leek : L'id du poireau à tester.
Retour
dead : vrai si le poireau leek est mort, faux s'il est vivant.
15 opérations
isEnemy(Nombre leek)	:	Booléen isEnemy

Détermine si le poireau leek est votre ennemi.
Paramètres
leek : L'id du poireau à tester.
Retour
isEnemy : vrai si le poireau leek est un ennemi, faux s'il s'agit d'un allié ou bien vous-même.
15 opérations
isSummon()	:	Chaîne summon

Renvoie si vous êtes une invocation ou non.
Retour
summon : true si vous êtes une invocation, false sinon.
10 opérations
isSummon(Nombre entity)	:	Nombre summon

Renvoie si l'entité entity est une invocation ou non.
Paramètres
entity : true si entity est une invocation, false sinon.
Retour
summon : L'id de l'entité à tester.
10 opérations
listen()	:	Tableau messages

Renvoie le tableau des say() des poireaux précédents, sous la forme [leek_id, message].
Retour
messages : Le tableau des say() précédents.
78 opérations
say(Chaîne message)

Fait parler votre poireau.
Paramètres
message : Message qu'annonçera votre poireau dans l'arène.
30 opérations
setWeapon(Nombre weapon)

Équipe l'arme weapon sur votre poireau.
Paramètres
weapon : Id de l'arme à équiper.
15 opérations
EFFECT_ABSOLUTE_SHIELD

Valeur
EFFECT_ABSOLUTE_SHIELD = 6
EFFECT_AFTEREFFECT

Valeur
EFFECT_AFTEREFFECT = 25
EFFECT_ANTIDOTE

Valeur
EFFECT_ANTIDOTE = 23
EFFECT_BOOST_MAX_LIFE

Valeur
EFFECT_BOOST_MAX_LIFE = 12
EFFECT_BUFF_AGILITY

Valeur
EFFECT_BUFF_AGILITY = 4
EFFECT_BUFF_FORCE

Valeur
EFFECT_BUFF_FORCE = 3
EFFECT_BUFF_MP

Valeur
EFFECT_BUFF_MP = 7
EFFECT_BUFF_RESISTANCE

Valeur
EFFECT_BUFF_RESISTANCE = 21
EFFECT_BUFF_STRENGTH

Valeur
EFFECT_BUFF_STRENGTH = 3
EFFECT_BUFF_TP

Valeur
EFFECT_BUFF_TP = 8
EFFECT_BUFF_WISDOM

Valeur
EFFECT_BUFF_WISDOM = 22
EFFECT_DAMAGE

Valeur
EFFECT_DAMAGE = 1
EFFECT_DAMAGE_RETURN

Valeur
EFFECT_DAMAGE_RETURN = 20
EFFECT_DEBUFF

Valeur
EFFECT_DEBUFF = 9
EFFECT_HEAL

Valeur
EFFECT_HEAL = 2
EFFECT_INVERT

Valeur
EFFECT_INVERT = 11
EFFECT_KILL

Valeur
EFFECT_KILL = 16
EFFECT_POISON

Valeur
EFFECT_POISON = 13
EFFECT_RELATIVE_SHIELD

Valeur
EFFECT_RELATIVE_SHIELD = 5
EFFECT_RESURRECT

Valeur
EFFECT_RESURRECT = 15
EFFECT_SHACKLE_MAGIC

Valeur
EFFECT_SHACKLE_MAGIC = 24
EFFECT_SHACKLE_MP

Valeur
EFFECT_SHACKLE_MP = 17
EFFECT_SHACKLE_STRENGTH

Valeur
EFFECT_SHACKLE_STRENGTH = 19
EFFECT_SHACKLE_TP

Valeur
EFFECT_SHACKLE_TP = 18
EFFECT_SUMMON

Valeur
EFFECT_SUMMON = 14
EFFECT_TARGET_ALLIES

Valeur
EFFECT_TARGET_ALLIES = 2
EFFECT_TARGET_CASTER

Valeur
EFFECT_TARGET_CASTER = 4
EFFECT_TARGET_ENEMIES

Valeur
EFFECT_TARGET_ENEMIES = 1
EFFECT_TARGET_NON_SUMMONS

Valeur
EFFECT_TARGET_NON_SUMMONS = 8
EFFECT_TARGET_NOT_CASTER

Valeur
EFFECT_TARGET_NOT_CASTER = 0
EFFECT_TARGET_SUMMONS

Valeur
EFFECT_TARGET_SUMMONS = 16
EFFECT_TELEPORT

Valeur
EFFECT_TELEPORT = 10
EFFECT_VULNERABILITY

Valeur
EFFECT_VULNERABILITY = 26
ENTITY_BULB

Désigne une entité de type Bulbe.
Valeur
ENTITY_BULB = 2
ENTITY_LEEK

Désigne une entité de type Poireau.
Valeur
ENTITY_LEEK = 1
USE_CRITICAL

Valeur
USE_CRITICAL = 2
USE_FAILED

Valeur
USE_FAILED = 0
USE_INVALID_COOLDOWN

Valeur
USE_INVALID_COOLDOWN = -3
USE_INVALID_POSITION

Valeur
USE_INVALID_POSITION = -4
USE_INVALID_TARGET

Valeur
USE_INVALID_TARGET = -1
USE_NOT_ENOUGH_TP

Valeur
USE_NOT_ENOUGH_TP = -2
USE_SUCCESS

Valeur
USE_SUCCESS = 1
USE_TOO_MANY_SUMMONS

Erreur renvoyée par summon lorsque vous avez déjà 4 invocations vivantes.
Valeur
USE_TOO_MANY_SUMMONS = -5
canUseWeapon(Nombre leek)	:	Booléen canUse

Détermine si votre poireau peut tirer sur le poireau d'id leek avec son arme courante.
Paramètres
leek : L'id du poireau sur lequel vous voulez tirer.
Retour
canUse : true si votre poireau peut tirer, false sinon.
45 opérations
canUseWeapon(Nombre weapon , Nombre leek)	:	Booléen canUse

Détermine si votre poireau peut tirer sur le poireau d'id leek avec l'arme weapon.
Paramètres
weapon : L'arme à tester.
leek : L'id du poireau sur lequel vous voulez tirer.
Retour
canUse : true si votre poireau peut tirer, false sinon.
45 opérations
canUseWeaponOnCell(Nombre cell)	:	Booléen canUse

Détermine si votre poireau peut tirer sur la cellule cell avec son arme courante.
Paramètres
cell : Le numéro de la cellule sur laquelle vous voulez tirer.
Retour
canUse : true si votre poireau peut tirer, false sinon.
45 opérations
canUseWeaponOnCell(Nombre weapon , Nombre cell)	:	Booléen canUse

Détermine si votre poireau peut tirer sur la cellule cell avec l'arme weapon.
Paramètres
weapon : L'arme à tester.
cell : Le numéro de la cellule sur laquelle vous voulez tirer.
Retour
canUse : true si votre poireau peut tirer, false sinon.
45 opérations
getWeaponArea(Nombre weapon)	:	Nombre area

Renvoie le type de zone d'effet de l'arme weapon.
Paramètres
weapon : L'arme dont le type de zone sera renvoyé.
Retour
area : Le type de zone de l'arme weapon parmi les constantes AREA_* :
AREA_POINT : zone d'une seule case
AREA_LASER_LINE : ligne d'un laser
AREA_CIRCLE_1 : zone circulaire de 3 cases de diamètre
AREA_CIRCLE_2 : zone circulaire de 5 cases de diamètre
AREA_CIRCLE_3 : zone circulaire de 7 cases de diamètre
15 opérations
getWeaponCost(Nombre weapon)	:	Nombre cost

Renvoie le coût en PT de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont le coût sera renvoyé.
Retour
cost : Le coût en PT de l'arme weapon.
15 opérations
getWeaponEffectiveArea(Nombre cell)	:	TableauDeNombres cells

Renvoie la liste des cellules qui seront affectées si l'arme courante est utilisée sur la cellule cell.
Paramètres
cell : La cellule cible.
Retour
cells : Le tableau contenant les ids de toutes les cellules qui seront affectées.
78 opérations
getWeaponEffectiveArea(Nombre weapon , Nombre cell)	:	TableauDeNombres cells

Renvoie la liste des cellules qui seront affectées si l'arme weapon est utilisée sur la cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
Retour
cells : Le tableau contenant les ids de toutes les cellules qui seront affectées.
78 opérations
getWeaponEffectiveArea(Nombre weapon , Nombre cell , Nombre from)	: TableauDeNombres cells

Renvoie la liste des cellules qui seront affectées si l'arme weapon est utilisée sur la cellule cell depuis la cellule from.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
from : La cellule depuis laquelle l'arme est utilisée.
Retour
cells : Le tableau contenant les ids de toutes les cellules qui seront affectées.
78 opérations
getWeaponEffects(Nombre weapon)	:	TableauDeNombres effects

Renvoie les effets de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont les effets seront retournés.
Retour
effects : Un tableau contenant les effets de l'arme weapon. Chaque effet est lui-même un tableau de la forme [type, min, max, turns, targets].
type est une constante parmis les constantes d'effet : EFFECT_DAMAGE, EFFECT_HEAL, EFFECT_ABSOLUTE_SHIELD, EFFECT_RELATIVE_SHIELD, EFFECT_DEBUFF, EFFECT_BUFF_FORCE, #EFFECT_BUFF_AGILITY, EFFECT_BUFF_MP, EFFECT_BUFF_TP etc.
min et max sont la valeur minimum et maximum de l'effet (comme indiqué dans le marché).
turns est la durée de l'effet en nombre de tours.
targets représente les joueurs qui seront touchés par cet effet dans la zone. Il s'agit d'une combinaison binaire des constantes :
EFFECT_TARGET_ALLIES : Affecte les alliés
EFFECT_TARGET_ENEMIES : Affecte les ennemis
EFFECT_TARGET_CASTER : Affecte toujours le lanceur
EFFECT_TARGET_NOT_CASTER : N'affecte jamais le lanceur
EFFECT_TARGET_SUMMONS : Affecte les invocations du lanceur
On peut lire cette valeur de la manière suivante :
1
2
3
4
5
if (targets & EFFECT_TARGET_ALLIES) debug('Affecte les alliés');
    if (targets & EFFECT_TARGET_ENEMIES) debug('Affecte les ennemis');
    if (targets & EFFECT_TARGET_CASTER) debug('Affecte toujours le lanceur');
    if (targets & EFFECT_TARGET_NOT_CASTER) debug('N'affecte jamais le lanceur');
    if (targets & EFFECT_TARGET_SUMMONS) debug('Affecte les invocations');
125 opérations
getWeaponFailure(Nombre weapon)	:	Nombre failure

Cette fonction est dépréciée.
Renvoie le pourcentage de risque d'échec de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont le pourcentage d'échec sera renvoyé.
Retour
failure : Pourcentage d'échec de l'arme weapon, un nombre entier entre 0 et 100.
15 opérations
getWeaponMaxRange(Nombre weapon)	:	Nombre maxRange

Renvoie la portée maximale de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont la portée maximale sera renvoyée.
Retour
maxRange : La portée maximale de l'arme weapon.
15 opérations
getWeaponMaxScope(Nombre weapon)	:	Nombre maxScope

Cette fonction est dépréciée.
Renvoie la portée maximale de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont la portée maximale sera renvoyée.
Retour
maxScope : La portée maximale de l'arme weapon.
15 opérations
getWeaponMinRange(Nombre weapon)	:	Nombre minRange

Renvoie la portée minimale de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont la portée minimale sera renvoyée.
Retour
minRange : La portée minimale de l'arme weapon.
15 opérations
getWeaponMinScope(Nombre weapon)	:	Nombre minScope

Cette fonction est dépréciée.
Renvoie la portée minimale de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont la portée minimale sera renvoyée.
Retour
minScope : La portée minimale de l'arme weapon.
15 opérations
getWeaponName(Nombre weapon)	:	Chaîne name

Renvoie le nom de l'arme weapon.
Paramètres
weapon : L'id de l'arme dont le nom sera renvoyé.
Retour
name : Le nom de l'arme weapon.
15 opérations
isInlineWeapon(Nombre weapon)	:	Booléen isInline

Détermine si l'arme weapon peut être utlisée uniquement en ligne.
Paramètres
weapon : L'id de l'arme à tester.
Retour
isInline : vrai si l'arme est utilisable uniquement en ligne, faux sinon.
10 opérations
isWeapon(Nombre value)	:	Chaîne weapon

Détermine si une valeur est une constante représentant une arme.

isWeapon(WEAPON_LASER) = true;
isWeapon(CHIP_TELEPORTATION) = false.
Paramètres
value : Le nombre à déterminer.
Retour
weapon : true si la valeur est une constante d'arme.
15 opérations
useWeapon(Nombre leek)	:	Nombre result

Utilise l'arme sélectionnée sur le poireau leek.
Paramètres
leek : Poireau ciblé.
Retour
result : Les valeurs de retour de useWeapon sont :
USE_CRITICAL, en cas de coup critique
USE_SUCCESS, en cas de réussite
USE_FAILED, en cas de d'échec
USE_INVALID_TARGET, si la cible n'existe pas
USE_NOT_ENOUGH_TP, si votre poireau n'a pas assez de TP
USE_INVALID_POSITION, si la portée est mauvaise ou la ligne de vue n'est pas dégagée
3000 opérations
useWeaponOnCell(Nombre cell)	:	Nombre result

Utilise l'arme sélectionnée sur la cellule cell.
Paramètres
cell : Cellule ciblée.
Retour
result : Une valeur supérieure à 0 si l'attaque a été lancée.
3000 opérations
weaponNeedLos()	:	Booléen needLos

Renvoie si l'arme weapon a besoin d'une ligne de vue pour tirer.
Retour
needLos : true si l'arme weapon a besoin d'une ligne de vue pour tirer, false sinon.
10 opérations
weaponNeedLos(Nombre weapon)	:	Booléen needLos

Paramètres
weapon :
Retour
needLos :
10 opérations
WEAPON_AXE

Valeur
WEAPON_AXE = 109
WEAPON_B_LASER

Valeur
WEAPON_B_LASER = 60
WEAPON_BROADSWORD

Valeur
WEAPON_BROADSWORD = 108
WEAPON_DESTROYER

Valeur
WEAPON_DESTROYER = 40
WEAPON_DOUBLE_GUN

Valeur
WEAPON_DOUBLE_GUN = 39
WEAPON_ELECTRISOR

Valeur
WEAPON_ELECTRISOR = 44
WEAPON_FLAME_THROWER

Valeur
WEAPON_FLAME_THROWER = 46
WEAPON_GAZOR

Valeur
WEAPON_GAZOR = 48
WEAPON_GRENADE_LAUNCHER

Valeur
WEAPON_GRENADE_LAUNCHER = 43
WEAPON_KATANA

Valeur
WEAPON_KATANA = 107
WEAPON_LASER

Valeur
WEAPON_LASER = 42
WEAPON_MACHINE_GUN

Valeur
WEAPON_MACHINE_GUN = 38
WEAPON_MAGNUM

Valeur
WEAPON_MAGNUM = 45
WEAPON_M_LASER

Valeur
WEAPON_M_LASER = 47
WEAPON_PISTOL

Valeur
WEAPON_PISTOL = 37
WEAPON_SHOTGUN

Valeur
WEAPON_SHOTGUN = 41
canUseChip(Nombre chip , Nombre leek)	:	Booléen canUse

Détermine si votre poireau peut utiliser la puce chip sur le poireau d'id leek.
Paramètres
chip : Le numéro de la puce à tester.
leek : L'id du poireau sur lequel vous voulez utiliser la puce.
Retour
canUse : true si votre poireau peut utiliser la puce, false sinon.
45 opérations
canUseChipOnCell(Nombre chip , Nombre cell)	:	Booléen canUse

Détermine si votre poireau peut utiliser la puce chip sur la cellule cell.
Paramètres
chip : Le numéro de la puce à tester.
cell : Le numéro de la cellule sur laquelle vous voulez utliser la puce.
Retour
canUse : true si votre poireau peut utiliser la puce, false sinon.
45 opérations
chipNeedLos(Nombre chip)	:	Booléen needLos

Renvoie si la puce chip a besoin d'une ligne de vue pour être utilisée.
Paramètres
chip : L'id de la puce à tester.
Retour
needLos : true si la puce chip a besoin d'une ligne de vue pour être utilisée, false sinon.
10 opérations
getChipArea(Nombre chip)	:	Nombre area

Renvoie le type de zone d'effet de de la puce weapon.
Paramètres
chip : La puce dont le type de zone sera renvoyé.
Retour
area : Le type de zone de la puce chip parmi les constantes AREA_* :
AREA_POINT : zone d'une seule case
AREA_LASER_LINE : ligne d'un laser
AREA_CIRCLE_1 : zone circulaire de 3 cases de diamètre
AREA_CIRCLE_2 : zone circulaire de 5 cases de diamètre
AREA_CIRCLE_3 : zone circulaire de 7 cases de diamètre
15 opérations
getChipCooldown(Nombre chip)	:	Nombre cooldown

Renvoie le temps de récupération de la puce chip, issu du marché.
Paramètres
chip : La puce dont le cooldown sera renvoyé.
Retour
cooldown : Le cooldown de la puce chip.
15 opérations
getChipCost(Nombre chip)	:	Nombre cost

Renvoie le coût en PT de la puce chip.
Paramètres
chip : La puce dont le coût sera renvoyé.
Retour
cost : Le coût de la puce chip.
15 opérations
getChipEffectiveArea(Nombre chip , Nombre cell)	:	TableauDeNombres cells

Renvoie la liste des cellules qui seront affectés si la puce chip est utilisée sur la cellule cell.
Paramètres
chip : La puce à tester.
cell : La cellule cible.
Retour
cells : Le tableau contenant les ids de toutes les cellules qui seront affectés.
78 opérations
getChipEffectiveArea(Nombre chip , Nombre cell , Nombre from)	:	TableauDeNombres cells

Renvoie la liste des cellules qui seront affectés si la puce chip est utilisée sur la cellule cell depuis une cellule from.
Paramètres
chip : La puce à tester.
cell : La cellule cible.
from : La cellule depuis laquelle la puce est utilisée.
Retour
cells : Le tableau contenant les ids de toutes les cellules qui seront affectés.
78 opérations
getChipEffects(Nombre chip)	:	TableauDeNombres effects

Renvoie les effets de la puce chip.
Paramètres
chip : La puce dont les effets seront renvoyés.
Retour
effects : Les effets de la puce chip. Même valeur de retour que pour la fonction getWeaponEffects.
125 opérations
getChipFailure(Nombre chip)	:	Nombre failure

Cette fonction est dépréciée.
Renvoie le pourcentage de risque d'échec de la puce chip.
Paramètres
chip : La puce dont le pourcentage d'échec sera renvoyé.
Retour
failure : Pourcentage d'échec de la puce chip, un nombre entier entre 0 et 100.
15 opérations
getChipMaxRange(Nombre chip)	:	Nombre maxRange

Renvoie la portée maximale de la puce chip.
Paramètres
chip : La puce dont la portée maximale sera renvoyée.
Retour
maxRange : La portée maximale de la puce chip.
15 opérations
getChipMaxScope(Nombre chip)	:	Nombre maxScope

Cette fonction est dépréciée.
Renvoie la portée maximale de la puce chip.
Paramètres
chip : La puce dont la portée maximale sera renvoyée.
Retour
maxScope : La portée maximale de la puce chip.
15 opérations
getChipMinRange(Nombre chip)	:	Nombre minRange

Renvoie la portée minimale de la puce chip.
Paramètres
chip : La puce dont la portée minimale sera renvoyée.
Retour
minRange : La portée minimale de la puce chip.
15 opérations
getChipMinScope(Nombre chip)	:	Nombre minScope

Cette fonction est dépréciée.
Renvoie la portée minimale de la puce chip.
Paramètres
chip : La puce dont la portée minimale sera renvoyée.
Retour
minScope : La portée minimale de la puce chip.
15 opérations
getChipName(Nombre chip)	:	Chaîne name

Renvoie le nom de la puce chip.
Paramètres
chip : La puce dont le nom sera renvoyé.
Retour
name : Le nom de la puce chip.
15 opérations
getCooldown(Nombre chip)	:	Nombre cooldown

Renvoie le cooldown actuel de la puce chip.
Paramètres
chip : La puce dont le cooldown actuel sera renvoyé.
Retour
cooldown : Le cooldown actuel de la puce chip, il s'agit du nombre de tours avant lesquels la puce deviendra utilisable, 0 si elle est actuellement utilisable.
30 opérations
getCooldown(Nombre chip , Nombre leek)	:	Nombre cooldown

Renvoie le cooldown actuel de la puce chip du poireau leek.
Paramètres
chip : La puce dont le cooldown actuel sera renvoyé.
leek : Le poireau dont le cooldown sera renvoyé.
Retour
cooldown : Le cooldown actuel de la puce chip, il s'agit du nombre de tours avant lesquels la puce deviendra utilisable, 0 si elle est actuellement utilisable.
30 opérations
isChip(Nombre value)	:	Chaîne chip

Détermine si une valeur est une constante représentant une puce.

isChip(CHIP_RAGE) = true;
isChip(WEAPON_PISTOL) = false.
Paramètres
value : Le nombre à déterminer.
Retour
chip : true si la valeur est une constante de puce.
10 opérations
isInlineChip(Nombre chip)	:	Booléen isInline

Détermine si la puce chip peut être utlisée uniquement en ligne.
Paramètres
chip : L'id de la puce à tester.
Retour
isInline : vrai si la puce est utilisable uniquement en ligne, faux sinon.
10 opérations
resurrect(Nombre entity , Nombre cell)	:	Nombre result

Utilise la puce CHIP_RESURRECTION pour ressusciter une entité d'id entity morte, sur la cellule cell.
Paramètres
entity : L'id de l'entité à faire revivre.
cell : La cellule sur laquelle l'entité réapparaîtra.
Retour
result : Le résultat du lancement de la puce, parmi les constantes USE_*.
500 opérations
summon(Nombre chip , Nombre cell , Fonction  ai)	:	Nombre return

Invoque une entité déterminée par la puce chip sur la cellule cell ayant pour IA la fonction ai.
Paramètres
chip : La puce utilisée pour l'invocation. La puce doit être une puce de type invocation et doit être équipée sur le poireau qui utilise la fonction summon.
cell : La cellule ou l'invocation doit apparaître.
ai : L'IA de l'invocation, sous la forme d'une fonction.
Retour
return : La fonction summon a le même retour que la fonction useChip.
1750 opérations
useChip(Nombre chip , Nombre leek)	:	Nombre result

Utilise le chip chip sur le poireau leek.
Paramètres
chip : Chip à utiliser.
leek : Poireau cible.
Retour
result : Les valeurs de retour de useChip sont :
USE_CRITICAL, en cas de coup critique
USE_SUCCESS, en cas de réussite
USE_FAILED, en cas de d'échec
USE_INVALID_TARGET, si la cible n'existe pas
USE_NOT_ENOUGH_TP, si votre poireau n'a pas assez de TP
USE_INVALID_COOLDOWN, si la puce n'est pas encore utilisable
USE_INVALID_POSITION, si la portée est mauvaise ou la ligne de vue n'est pas dégagée
3000 opérations
useChipOnCell(Nombre chip , Nombre cell)	:	Nombre result

Utilise le chip chip sur la cellule cell.
Paramètres
chip : Chip à utiliser.
cell : Cellule cible.
Retour
result : Une valeur supérieure à 0 si l'attaque a été lancée.
3000 opérations
CHIP_ACCELERATION

Valeur
CHIP_ACCELERATION = 91
CHIP_ADRENALINE

Valeur
CHIP_ADRENALINE = 16
CHIP_ANTIDOTE

Valeur
CHIP_ANTIDOTE = 110
CHIP_ARMOR

Valeur
CHIP_ARMOR = 22
CHIP_ARMORING

Valeur
CHIP_ARMORING = 67
CHIP_BALL_AND_CHAIN

Valeur
CHIP_BALL_AND_CHAIN = 93
CHIP_BANDAGE

Valeur
CHIP_BANDAGE = 3
CHIP_BARK

Valeur
CHIP_BARK = 104
CHIP_BURNING

Valeur
CHIP_BURNING = 105
CHIP_CARAPACE

Valeur
CHIP_CARAPACE = 81
CHIP_COLLAR

Valeur
CHIP_COLLAR = 103
CHIP_CURE

Valeur
CHIP_CURE = 4
CHIP_DEVIL_STRIKE

Valeur
CHIP_DEVIL_STRIKE = 85
CHIP_DOPING

Valeur
CHIP_DOPING = 26
CHIP_DRIP

Valeur
CHIP_DRIP = 10
CHIP_FEROCITY

Valeur
CHIP_FEROCITY = 102
CHIP_FERTILIZER

Valeur
CHIP_FERTILIZER = 90
CHIP_FIRE_BULB

Valeur
CHIP_FIRE_BULB = 74
CHIP_FLAME

Valeur
CHIP_FLAME = 5
CHIP_FLASH

Valeur
CHIP_FLASH = 6
CHIP_FORTRESS

Valeur
CHIP_FORTRESS = 29
CHIP_FRACTURE

Valeur
CHIP_FRACTURE = 106
CHIP_HEALER_BULB

Valeur
CHIP_HEALER_BULB = 75
CHIP_HELMET

Valeur
CHIP_HELMET = 21
CHIP_ICE

Valeur
CHIP_ICE = 2
CHIP_ICEBERG

Valeur
CHIP_ICEBERG = 31
CHIP_ICED_BULB

Valeur
CHIP_ICED_BULB = 77
CHIP_INVERSION

Valeur
CHIP_INVERSION = 68
CHIP_LEATHER_BOOTS

Valeur
CHIP_LEATHER_BOOTS = 14
CHIP_LIBERATION

Valeur
CHIP_LIBERATION = 34
CHIP_LIGHTNING

Valeur
CHIP_LIGHTNING = 33
CHIP_LIGHTNING_BULB

Valeur
CHIP_LIGHTNING_BULB = 78
CHIP_LOAM

Valeur
CHIP_LOAM = 89
CHIP_METALLIC_BULB

Valeur
CHIP_METALLIC_BULB = 79
CHIP_METEORITE

Valeur
CHIP_METEORITE = 36
CHIP_MIRROR

Valeur
CHIP_MIRROR = 101
CHIP_MOTIVATION

Valeur
CHIP_MOTIVATION = 15
CHIP_PEBBLE

Valeur
CHIP_PEBBLE = 19
CHIP_PLAGUE

Valeur
CHIP_PLAGUE = 99
CHIP_PROTEIN

Valeur
CHIP_PROTEIN = 8
CHIP_PUNY_BULB

Valeur
CHIP_PUNY_BULB = 73
CHIP_RAGE

Valeur
CHIP_RAGE = 17
CHIP_RAMPART

Valeur
CHIP_RAMPART = 24
CHIP_REFLEXES

Valeur
CHIP_REFLEXES = 28
CHIP_REGENERATION

Valeur
CHIP_REGENERATION = 35
CHIP_REMISSION

Valeur
CHIP_REMISSION = 80
CHIP_RESURRECTION

Valeur
CHIP_RESURRECTION = 84
CHIP_ROCK

Valeur
CHIP_ROCK = 7
CHIP_ROCKFALL

Valeur
CHIP_ROCKFALL = 32
CHIP_ROCKY_BULB

Valeur
CHIP_ROCKY_BULB = 76
CHIP_SEVEN_LEAGUE_BOOTS

Valeur
CHIP_SEVEN_LEAGUE_BOOTS = 13
CHIP_SHIELD

Valeur
CHIP_SHIELD = 20
CHIP_SHOCK

Valeur
CHIP_SHOCK = 1
CHIP_SLOW_DOWN

Valeur
CHIP_SLOW_DOWN = 92
CHIP_SOLIDIFICATION

Valeur
CHIP_SOLIDIFICATION = 96
CHIP_SOPORIFIC

Valeur
CHIP_SOPORIFIC = 95
CHIP_SPARK

Valeur
CHIP_SPARK = 18
CHIP_STALACTITE

Valeur
CHIP_STALACTITE = 30
CHIP_STEROID

Valeur
CHIP_STEROID = 25
CHIP_STRETCHING

Valeur
CHIP_STRETCHING = 9
CHIP_TELEPORTATION

Valeur
CHIP_TELEPORTATION = 59
CHIP_THORN

Valeur
CHIP_THORN = 100
CHIP_TOXIN

Valeur
CHIP_TOXIN = 98
CHIP_TRANQUILIZER

Valeur
CHIP_TRANQUILIZER = 94
CHIP_VACCINE

Valeur
CHIP_VACCINE = 11
CHIP_VENOM

Valeur
CHIP_VENOM = 97
CHIP_WALL

Valeur
CHIP_WALL = 23
CHIP_WARM_UP

Valeur
CHIP_WARM_UP = 27
CHIP_WHIP

Valeur
CHIP_WHIP = 88
CHIP_WINGED_BOOTS

Valeur
CHIP_WINGED_BOOTS = 12
USE_RESURRECT_INVALID_ENTITY

Valeur renvoyée par la fonction resurrect lorsque l'entité spécifiée n'existe pas ou n'est pas encore morte.
Valeur
USE_RESURRECT_INVALID_ENTITY = -6
getCellContent(Nombre cell)	:	Nombre content

Retourne le contenu d'une cellule d'id cell.
Paramètres
cell : L'id de la cellule dont le contenu sera retourné.
Retour
content : Le contenu de la cellule cell
6 opérations
getCellDistance(Nombre cell1 , Nombre cell2)	:	Nombre distance

Retourne la distance entre deux cellules cell1 et cell2. 
La distance retournée est exprimée en nombre de cellules, et ne tient pas compte des divers obstacles entre les deux cellules. Pour obtenir la distance à vol d'oiseau, voir getDistance et pour obtenir la distance du chemin entre les deux cellules en évitant les obstacles, voir getPathLength.
Paramètres
cell1 : L'id de la cellule de départ.
cell2 : L'id de la cellule d'arrivée.
Retour
distance : La distance entre les deux cellules cell1 et cell2.
15 opérations
getCellFromXY(Nombre x , Nombre y)	:	Nombre cell

Retourne l'id de la cellule se trouvant à la position (x, y).
Paramètres
x : La position en x de la cellule.
y : La position en y de la cellule.
Retour
cell : L'id de la cellule à la position (x, y), null si la cellule n'existe pas.
5 opérations
getCellX(Nombre cell)	:	Nombre x

Détermine la position en X de la cellule cell.
Paramètres
cell : La cellule dont la position en X sera déterminée.
Retour
x : La position en X de la cellule.
5 opérations
getCellY(Nombre cell)	:	Nombre y

Détermine la position en Y de la cellule cell.
Paramètres
cell : La cellule dont la position en Y sera déterminée.
Retour
y : La position en Y de la cellule.
5 opérations
getDistance(Nombre cell1 , Nombre cell2)	:	Nombre distance

Calcule la distance à vol d'oiseau entre deux cellules cell1 et cell2. 
Pour obtenir la distance en nombre de cellules, voir getCellDistance, et pour obtenir la longueur du chemin entre les deux cellules en esquivant les divers obstacles, voir getPathLength.
Paramètres
cell1 : La cellule de départ.
cell2 : La cellule d'arrivée.
Retour
distance : La distance à vol d'oiseau entre les deux cellules.
15 opérations
getLeekOnCell(Nombre cell)	:	Nombre leek

Renvoie le poireau qui se trouve sur la cellule cell.
Paramètres
cell : La cellule dont on veut récupérer le poireau.
Retour
leek : L'id du poireau se trouvant sur la cellule, ou -1 si la cellule ne comporte pas de poireau.
15 opérations
getMapType()	:	Nombre map_type

Renvoie le type de terrain sur lequel se déroule le combat (usine, désert, forêt etc.), parmi les constantes MAP_NEXUS, MAP_FACTORY, MAP_DESERT, MAP_FOREST, MAP_GLACIER et MAP_BEACH.
Retour
map_type : Le type de terrain.
5 opérations
getObstacles()	:	TableauDeNombres obstacles

Renvoie la liste des cases obstacles du terrain.
Retour
obstacles : Le tableau contenant les id des cellules obstacles.
85 opérations
getPath(Nombre cell1 , Nombre cell2)	:	TableauDeNombres path

Renvoie le chemin en évitant les obstacles entre deux cellules cell1 et cell2, si celui-ci existe.
Paramètres
cell1 : La cellule de départ.
cell2 : La cellule d'arrivée.
Retour
path : Le tableau contenant les cellules constituant le chemin entre les deux cellules.
Opérations
variables
getPath(Nombre start , Nombre end , TableauDeNombres ignoredCells)	: TableauDeNombres path

Renvoie le chemin en évitant les obstacles entre deux cellules cell1 et cell2, si celui-ci existe, en ignorant les cellules contenues dans le tableau ignoredCells. Si un joueur ce situe sur une cellule ignorée, le chemin peut passer sur lui.
Paramètres
start : La cellule de départ.
end : La cellule d'arrivée.
ignoredCells : Le tableau des cellules à ignorer.
Retour
path : Le tableau contenant les cellules constituant le chemin entre les deux cellules.
Opérations
variables
getPathLength(Nombre cell1 , Nombre cell2)	:	Nombre length

Renvoie la longueur du chemin entre deux cellules cell1 et cell2, en esquivant les obstacles. Cette fonction équivaut à count(getPath(cell1, cell2)).

Pour obtenir la distance à vol d'oiseau, utilisez getDistance, et pour obtenir la distance entre deux cellules sans tenir compte des obstacles, utilisez getCellDistance.
Paramètres
cell1 : La cellule de départ.
cell2 : La cellule d'arrivée.
Retour
length : La longueur du chemin entre cell1 et cell2.
Opérations
variables
getPathLength(Nombre cell1 , Nombre cell2 , TableauDeNombres ignoredCells)	: TableauDeNombres length

Renvoie la longueur du chemin entre deux cellules cell1 et cell2, en esquivant les obstacles, en ignorant les cellules contenues dans le tableau ignoredCells. Si un joueur ce situe sur une cellule ignorée, le chemin peut passer sur lui.
Paramètres
cell1 : La cellule de départ.
cell2 : La cellule d'arrivée.
ignoredCells : Le tableau des cellules à ignorer.
Retour
length : La longueur du chemin entre cell1 et cell2.
Opérations
variables
isEmptyCell(Nombre cell)	:	Booléen empty

Détermine si une cellule est vide.
Paramètres
cell : La cellule à tester.
Retour
empty : vrai si la cellule est vide, faux sinon.
10 opérations
isLeek(Nombre cell)	:	Booléen isLeek

Détermine si le contenu de la cellule cell est un poireau.
Paramètres
cell : La cellule à tester.
Retour
isLeek : vrai si la cellule contient un poireau, faux sinon.
10 opérations
isObstacle(Nombre cell)	:	Booléen isObstacle

Détermine si le contenu de la cellule cell est un obstacle.
Paramètres
cell : La cellule à tester.
Retour
isObstacle : vrai si la cellule contient un obstacle, faux sinon.
10 opérations
isOnSameLine(Nombre cell1 , Nombre cell2)	:	Booléen sameLine

Détermine si deux cellules cell1 et cell2 sont sur la même ligne.
Paramètres
cell1 : La première cellule.
cell2 : La deuxième cellule.
Retour
sameLine : vrai si les deux cellules sont sur la même ligne, faux sinon.
15 opérations
CELL_EMPTY

Valeur
CELL_EMPTY = 0
CELL_OBSTACLE

Valeur
CELL_OBSTACLE = 2
CELL_PLAYER

Valeur
CELL_PLAYER = 1
MAP_BEACH

Valeur
MAP_BEACH = 6
MAP_DESERT

Valeur
MAP_DESERT = 3
MAP_FACTORY

Valeur
MAP_FACTORY = 2
MAP_FOREST

Valeur
MAP_FOREST = 4
MAP_GLACIER

Valeur
MAP_GLACIER = 5
MAP_NEXUS

Valeur
MAP_NEXUS = 1
getAliveAllies()	:	TableauDeNombres allies

Retourne un tableau de tous vos alliés vivants dans le combat.
Retour
allies : Un tableau contenant les ids de tous vos alliés vivants.
100 opérations
getAliveEnemies()	:	TableauDeNombres enemies

Retourne un tableau de tous vos ennemis vivants dans le combat.
Retour
enemies : Un tableau contenant les ids de tous vos ennemis vivants.
100 opérations
getAliveEnemiesCount()	:	Nombre numAliveEnemies

Renvoie le nombre d'ennemis vivants dans le combat.
Retour
numAliveEnemies : Le nombre d'ennemis vivants.
25 opérations
getAllies()	:	TableauDeNombres allies

Retourne un tableau contenant vos alliés, et votre poireau.
Retour
allies : Le tableau des alliés et votre poireau.
100 opérations
getAlliesCount()	:	Nombre numAllies

Renvoie le nombre d'alliés dans le combat.
Retour
numAllies : Le nombre d'alliés.
25 opérations
getAlliesLife()	:	Nombre life

Retourne la vie totale de vos alliés.
Retour
life : La vie totale de vos alliés.
50 opérations
getCellsToUseChip(Nombre chip , Nombre leek)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser la puce chip sur le poireau leek.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
leek : Le poireau cible.
Retour
cells : Liste des cellules d'où la puce pourra être utilisée.
25834 opérations
getCellsToUseChip(Nombre chip , Nombre leek , TableauDeNombres ignoredCells)	: TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser la puce chip sur le poireau leek.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
leek : Le poireau cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cells : Liste des cellules d'où la puce pourra être utilisée.
25834 opérations
getCellsToUseChipOnCell(Nombre chip , Nombre cell)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser la puce chip sur la cellule cell.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
cell : La cellule cible.
Retour
cells : Liste des cellules d'où la puce pourra être utilisée.
25834 opérations
getCellsToUseChipOnCell(Nombre chip , Nombre cell , TableauDeNombres ignoredCells)	: TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser la puce chip sur la cellule cell.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
cell : La cellule cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cells : Liste des cellules d'où la puce pourra être utilisée.
25834 opérations
getCellsToUseWeapon(Nombre leek)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser son arme sur le poireau leek.
Paramètres
leek : Le poireau cible.
Retour
cells : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellsToUseWeapon(Nombre weapon , Nombre leek)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser l'arme weapon sur le poireau leek.
Paramètres
weapon : L'arme à tester.
leek : Le poireau cible.
Retour
cells : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellsToUseWeapon(Nombre weapon , Nombre leek , TableauDeNombres ignoredCells)	: TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser l'arme weapon sur le poireau leek.
Paramètres
weapon : L'arme à tester.
leek : Le poireau cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cells : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellsToUseWeaponOnCell(Nombre cell)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser son arme sur une cellule cell.
Paramètres
cell : La cellule cible.
Retour
cells : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellsToUseWeaponOnCell(Nombre weapon , Nombre cell)	:	TableauDeNombres cells

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser l'arme weapon sur une cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
Retour
cells : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellsToUseWeaponOnCell(Nombre weapon , Nombre cell , TableauDeNombres ignoredCells) :	TableauDeNombres cell

Retourne la liste des cellules à partir desquelles votre poireau pourra utiliser l'arme weapon sur une cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cell : Liste des cellules d'où l'arme pourra être utilisée.
25834 opérations
getCellToUseChip(Nombre chip , Nombre leek)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser la puce chip sur le poireau leek.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
leek : Le poireau cible.
Retour
cell : La cellule d'où la puce pourra être utilisée.
38080 opérations
getCellToUseChip(Nombre chip , Nombre leek , TableauDeNombres ignoredCells)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser la puce chip sur le poireau leek.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
leek : Le poireau cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cell : La cellule d'où la puce pourra être utilisée.
38080 opérations
getCellToUseChipOnCell(Nombre chip , Nombre cell , TableauDeNombres ignoredCells)	: Nombre cell

Détermine une cellule où votre poireau pourra utiliser la puce chip sur la cellule cell.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
cell : La cellule cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cell : La cellule d'où la puce pourra être utilisée.
38080 opérations
getCellToUseChipOnCell(Nombre chip , Nombre cell)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser la puce chip sur la cellule cell.
Paramètres
chip : La puce que le poireau veut pouvoir utiliser.
cell : La cellule cible.
Retour
cell : La cellule d'où la puce pourra être utilisée.
38080 opérations
getCellToUseWeapon(Nombre leek)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser son arme sur le poireau leek.
Paramètres
leek : Le poireau cible.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getCellToUseWeapon(Nombre weapon , Nombre leek)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser l'arme weapon sur le poireau leek.
Paramètres
weapon : L'arme à tester.
leek : Le poireau cible.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getCellToUseWeapon(Nombre weapon , Nombre leek , TableauDeNombres ignoredCells)	: Nombre cell

Détermine une cellule où votre poireau pourra utiliser son arme sur le poireau leek.
Paramètres
weapon : L'arme à tester.
leek : Le poireau cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getCellToUseWeaponOnCell(Nombre cell)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser son arme sur une cellule cell.
Paramètres
cell : La cellule cible.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getCellToUseWeaponOnCell(Nombre weapon , Nombre cell)	:	Nombre cell

Détermine une cellule où votre poireau pourra utiliser l'arme weapon sur une cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getCellToUseWeaponOnCell(Nombre weapon , Nombre cell , TableauDeNombres ignoredCells)	: Nombre cell

Détermine une cellule où votre poireau pourra utiliser son arme sur une cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
ignoredCells : Tableau de cellules à ignorer.
Retour
cell : La cellule d'où l'arme pourra être utilisée.
38080 opérations
getChipTargets(Nombre chip , Nombre cell)	:	TableauDeNombres targets

Renvoie les poireaux qui seront affectés si la puce chip est utilisée sur la cellule cell.
Paramètres
chip : La puce à tester.
cell : La cellule cible.
Retour
targets : Le tableau contenant les ids de tous les poireaux qui seront affectés.
40 opérations
getDeadAllies()	:	TableauDeNombres deadAllies

Renvoie les poireaux alliés morts.
Retour
deadAllies : Le tableau des poireaux alliés morts.
100 opérations
getDeadEnemies()	:	TableauDeNombres deadEnemies

Renvoie les poireaux ennemis morts.
Retour
deadEnemies : Le tableau des poireaux ennemis morts.
100 opérations
getDeadEnemiesCount()	:	Nombre numDeadEnemies

Renvoie le nombre d'ennemis morts dans le combat.
Retour
numDeadEnemies : Le nombre d'ennemis morts.
25 opérations
getEnemies()	:	TableauDeNombres enemies

Renvoie les poireaux ennemis (vivants ou morts) dans le combat.
Retour
enemies : Un tableau contenant les ids de tous les poireaux ennemis.
100 opérations
getEnemiesCount()	:	Nombre numEnemies

Renvoie le nombre d'ennemis dans le combat.
Retour
numEnemies : Le nombre d'ennemis.
25 opérations
getEnemiesLife()	:	Nombre life

Calcule la somme des points de vie de tous les poireaux ennemis.
Retour
life : La somme des points de vie de l'équipe ennemie.
50 opérations
getFarthestAlly()	:	Nombre farthestAlly

Détermine l'allié le plus éloigné de votre poireau, à vol d'oiseau.
Retour
farthestAlly : L'id du poireau allié le plus éloigné.
31 opérations
getFarthestEnemy()	:	Nombre farthestEnemy

Détermine l'ennemi le plus éloigné de votre poireau, à vol d'oiseau.
Retour
farthestEnemy : L'id du poireau ennemi le plus éloigné.
31 opérations
getFightContext()	:	Nombre context

Retourne le contexte du combat actuel.
Retour
context : Selon le contexte du combat : Combat de test (FIGHT_CONTEXT_TEST), Combat en arène (FIGHT_CONTEXT_GARDEN), Combat en tournoi (FIGHT_CONTEXT_TOURNAMENT), Combat en défi (FIGHT_CONTEXT_CHALLENGE)
10 opérations
getFightType()	:	Nombre fightType

Retourne le type de combat actuel.
Retour
fightType : Selon le type de combat : Combat en solo (FIGHT_TYPE_SOLO), Combat d'éleveur (FIGHT_TYPE_FARMER), Combat d'équipe (FIGHT_TYPE_TEAM)
10 opérations
getNearestAlly()	:	Nombre nearestAlly

Renvoie le poireau allié le plus proche de votre poireau.
Retour
nearestAlly : L'id du poireau allié le plus proche.
25 opérations
getNearestAllyTo(Nombre leek)	:	Nombre ally

Renvoie le poireau allié le plus proche du poireau fourni en paramètre.
Paramètres
leek : L'id du poireau dont on veut connaitre l'allié le plus proche.
Retour
ally : L'id du poireau allié le plus proche.
35 opérations
getNearestAllyToCell(Nombre cell)	:	Nombre ally

Renvoie le poireau allié le plus proche de la cellule fournie en paramètre.
Paramètres
cell : L'id de la cellule dont on veut connaitre l'allié le plus proche.
Retour
ally : L'id du poireau allié le plus proche.
35 opérations
getNearestEnemy()	:	Nombre nearestEnemy

Renvoie le poireau ennemi le plus proche de votre poireau.
Retour
nearestEnemy : L'id du poireau ennemi le plus proche.
25 opérations
getNearestEnemyTo(Nombre leek)	:	Nombre enemy

Renvoie le poireau ennemi le plus proche du poireau fourni en paramètre.
Paramètres
leek : L'id du poireau dont on veut connaitre l'ennemi le plus proche.
Retour
enemy : L'id du poireau ennemi le plus proche.
35 opérations
getNearestEnemyToCell(Nombre cell)	:	Nombre enemy

Renvoie le poireau ennemi le plus proche de la cellule fournie en paramètre.
Paramètres
cell : L'id de la cellule dont on veut connaitre l'ennemi le plus proche.
Retour
enemy : L'id du poireau ennemi le plus proche.
35 opérations
getNextPlayer()	:	Nombre player

Renvoie l'id du poireau qui jouera après le joueur actuel.
Retour
player : Le joueur suivant.
20 opérations
getPreviousPlayer()	:	Nombre player

Renvoie l'id du poireau ayant joué avant le joueur actuel.
Retour
player : Le joueur précédent.
20 opérations
getTurn()	:	Nombre turn

Renvoie le tour actuel du combat. Le nombre de tours maximum est MAX_TURNS.
Retour
turn : Le tour actuel du combat.
15 opérations
getWeaponTargets(Nombre cell)	:	TableauDeNombres targets

Renvoie les poireaux qui seront affectés si l'arme courante est utilisée sur la cellule cell.
Paramètres
cell : La cellule cible.
Retour
targets : Le tableau contenant les ids de tous les poireaux qui seront affectés.
40 opérations
getWeaponTargets(Nombre weapon , Nombre cell)	:	TableauDeNombres targets

Renvoie les poireaux qui seront affectés si l'arme weapon est utilisée sur la cellule cell.
Paramètres
weapon : L'arme à tester.
cell : La cellule cible.
Retour
targets : Le tableau contenant les ids de tous les poireaux qui seront affectés.
40 opérations
lineOfSight(Nombre start , Nombre end)	:	Booléen los

Vérifie la ligne de vue entre la cellule start et la cellule end.
Paramètres
start : Cellule de départ.
end : Cellule cible.
Retour
los : Retourne vrai si la ligne de vue est dégagée
31 opérations
lineOfSight(Nombre start , Nombre end , Nombre leekToIgnore)	:	Booléen los

Vérifie la ligne de vue entre la cellule start et la cellule end, en ignorant le poireau leek.
Paramètres
start : Cellule de départ.
end : Cellule cible.
leekToIgnore : Le poireau à ignorer.
Retour
los : Retourne vrai si la ligne de vue est dégagée.
31 opérations
moveAwayFrom(Nombre leek)	:	Nombre mp

Éloigne votre poireau d'un autre poireau leek.
Paramètres
leek : Le poireau dont votre poireau doit s'éloigner.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFrom(Nombre leek , Nombre mp)	:	Nombre mp

Éloigne votre poireau d'un autre poireau leek, en utilisant au maximum mp points de mouvement.
Paramètres
leek : Le poireau dont votre poireau doit s'éloigner.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromCell(Nombre cell)	:	Nombre mp

Éloigne votre poireau d'une cellule cell.
Paramètres
cell : La cellule dont votre poireau doit s'éloigner.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromCell(Nombre cell , Nombre mp)	:	Nombre mp

Éloigne votre poireau d'une cellule cell, en utilisant au maximum mp points de mouvement.
Paramètres
cell : La cellule dont votre poireau doit s'éloigner.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromCells(TableauDeNombres cells)	:	Nombre mp

Éloigne votre poireau d'un ensemble de cellules cells.
Paramètres
cells : Le tableau contenant les cellules dont votre poireau doit s'éloigner.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromCells(TableauDeNombres cells , Nombre mp)	:	Nombre mp

Éloigne votre poireau d'un ensemble de cellules cells, en utilisant au maximum mp points de mouvement.
Paramètres
cells : Le tableau contenant les cellules dont votre poireau doit s'éloigner.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromLeeks(TableauDeNombres leeks)	:	Nombre mp

Éloigne votre poireau d'un ensemble de poireaux leeks.
Paramètres
leeks : Le tableau contenant les ids des poireaux dont votre poireau doit s'éloigner.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromLeeks(TableauDeNombres leeks , Nombre mp)	:	Nombre mp

Éloigne votre poireau d'un ensemble de poireaux leeks, en utilisant au maximum mp points de mouvement.
Paramètres
leeks : Le tableau contenant les ids des poireaux dont votre poireau doit s'éloigner.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromLine(Nombre cell1 , Nombre cell2)	:	Nombre mp

Éloigne votre poireau d'une ligne définie par deux cellules cell1 et cell2.
Paramètres
cell1 : La cellule 1.
cell2 : La cellule 2.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveAwayFromLine(Nombre cell1 , Nombre cell2 , Nombre mp)	:	Nombre mp

Éloigne votre poireau d'une ligne définie par deux cellules cell1 et cell2, en utilisant au maximum mp points de mouvement.
Paramètres
cell1 : La cellule 1.
cell2 : La cellule 2.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveToward(Nombre leek)	:	Nombre mp

Rapproche votre poireau d'un autre poireau leek.
Paramètres
leek : Le poireau vers lequel votre poireau doit se rapprocher.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveToward(Nombre leek , Nombre mp)	:	Nombre mp

Rapproche votre poireau d'un autre poireau leek, en utilisant au maximum mp points de mouvement.
Paramètres
leek : Le poireau vers lequel votre poireau doit se rapprocher.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardCell(Nombre cell)	:	Nombre mp

Rapproche votre poireau d'une cellule cell.
Paramètres
cell : La cellule vers laquelle votre poireau doit se rapprocher.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardCell(Nombre cell , Nombre mp)	:	Nombre mp

Rapproche votre poireau d'une cellule cell, en utilisant au maximum mp points de mouvement.
Paramètres
cell : La cellule vers laquelle votre poireau doit se rapprocher.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardCells(TableauDeNombres cells)	:	Nombre mp

Rapproche votre poireau d'un ensemble de cellules cells.
Paramètres
cells : Le tableau contenant les cellules vers lesquelles votre poireau doit se rapprocher.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardCells(TableauDeNombres cells , Nombre mp)	:	Nombre mp

Rapproche votre poireau d'un ensemble de cellules cells, en utilisant au maximum mp points de mouvement.
Paramètres
cells : Le tableau contenant les cellules vers lesquelles votre poireau doit se rapprocher.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardLeeks(TableauDeNombres leeks)	:	Nombre mp

Rapproche votre poireau d'un ensemble de poireaux leeks.
Paramètres
leeks : Le tableau contenant les ids des poireaux vers lesquels votre poireau doit se rapprocher.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardLeeks(TableauDeNombres leeks , Nombre mp)	:	Nombre mp

Rapproche votre poireau d'un ensemble de poireaux leeks, en utilisant au maximum mp points de mouvement.
Paramètres
leeks : Le tableau contenant les ids des poireaux vers lesquels votre poireau doit se rapprocher.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardLine(Nombre cell1 , Nombre cell2)	:	Nombre mp

Rapproche votre poireau d'une ligne définie par deux cellules cell1 et cell2.
Paramètres
cell1 : La cellule 1.
cell2 : La cellule 2.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
moveTowardLine(Nombre cell1 , Nombre cell2 , Nombre mp)	:	Nombre mp

Rapproche votre poireau d'une ligne définie par deux cellules cell1 et cell2, en utilisant au maximum mp points de mouvement.
Paramètres
cell1 : La cellule 1.
cell2 : La cellule 2.
mp : Le nombre maximum de PM à utiliser.
Retour
mp : Le nombre de points de mouvements utilisés.
500 opérations
AREA_CIRCLE_1

Zone circulaire de 3 cases de diamètre (croix).
Valeur
AREA_CIRCLE_1 = 3
AREA_CIRCLE_2

Zone circulaire de 5 cases de diamètre.
Valeur
AREA_CIRCLE_2 = 4
AREA_CIRCLE_3

Zone circulaire de 7 cases de diamètre.
Valeur
AREA_CIRCLE_3 = 5
AREA_LASER_LINE

Zone d'une laser, ligne depuis la portée minimum du laser jusqu’à sa portée maximum ou bien un obstacle.
Valeur
AREA_LASER_LINE = 2
AREA_POINT

Zone constituée d'une seule case.
Valeur
AREA_POINT = 1
FIGHT_CONTEXT_BATTLE_ROYALE

Valeur
FIGHT_CONTEXT_BATTLE_ROYALE = 5
FIGHT_CONTEXT_CHALLENGE

Contexte de combat de type défi.
Valeur
FIGHT_CONTEXT_CHALLENGE = 1
FIGHT_CONTEXT_GARDEN

Contexte de combat dans le potager.
Valeur
FIGHT_CONTEXT_GARDEN = 2
FIGHT_CONTEXT_TEST

Contexte de combat de test.
Valeur
FIGHT_CONTEXT_TEST = 0
FIGHT_CONTEXT_TOURNAMENT

Contexte de combat de tournois.
Valeur
FIGHT_CONTEXT_TOURNAMENT = 3
FIGHT_TYPE_BATTLE_ROYALE

Valeur
FIGHT_TYPE_BATTLE_ROYALE = 3
FIGHT_TYPE_FARMER

Combat d'éleveur.
Valeur
FIGHT_TYPE_FARMER = 1
FIGHT_TYPE_SOLO

Combat en solo.
Valeur
FIGHT_TYPE_SOLO = 0
FIGHT_TYPE_TEAM

Combat en équipe.
Valeur
FIGHT_TYPE_TEAM = 2
MAX_TURNS

Nombre de tours maximum dans un combat.
Valeur
MAX_TURNS = 64
debug(? object)

Enregistre un message object dans le log personnel, disponible dans le rapport à la fin du combat.
Paramètres
object : Le message à enregistrer.
100 opérations
debugC(? object , Nombre color)

Enregistre un message object dans le log personnel, disponible dans le rapport à la fin du combat, de la couleur color.
Paramètres
object : Le message à enregistrer.
color : La couleur du message. Vous pouvez utiliser la fonction getColor.
100 opérations
debugE(? object)

Enregistre un message d'erreur object dans le log personnel, disponible dans le rapport à la fin du combat.
Les messages d'erreur apparaissent en rouge dans le rapport de combat.
Paramètres
object : Le message d'erreur à enregistrer.
100 opérations
debugW(? object)

Enregistre un message d'avertissement object dans le log personnel, disponible dans le rapport à la fin du combat. 
Les messages d'avertissement apparaissent en orange dans le rapport de combat.
Paramètres
object : Le message d'avertissement à enregistrer.
100 opérations
deleteRegister(Chaîne key)

Supprime le registre associé à la clé key s'il existe.
Paramètres
key : La clé du registre à supprimer.
16 opérations
getInstructionsCount()	:	Nombre instructions

Renvoie le nombre d'instructions que votre poireau a effectué durant le tour actuel.
Retour
instructions : Le nombre d'instructions que votre poireau a effectué durant le tour actuel.
15 opérations
getOperations()	:	Nombre operations

Renvoie le nombre d'opérations consommées par votre poireau depuis le début de son tour. Ce nombre doit rester inférieur à OPERATIONS_LIMIT pour ne pas que le poireau plante.
Retour
operations : Nombre d'opérations consommées par votre poireau depuis le début de son tour.
1 opérations
getRegister(Chaîne key)	:	Chaîne value

Renvoie la valeur stockée dans le registre du poireau associé à la clé key ou null si le registre n'existe pas.
Paramètres
key : La clé du registre dont la valeur sera retournée.
Retour
value : La valeur stockée dans le registre de clé key.
15 opérations
getRegisters()	:	TableauDeChaînes registers

Renvoie l'ensemble des registres du poireau sous la forme d'un tableau associatif [clé du registre : valeur du registre]. Exemple :
1
2
3
debug(getRegisters());
// Affiche par exemple :
// ['reg1' : '314323', 'reg2' : 'test_string']
Retour
registers : Le tableau associatif correspondant à tous les registres du poireau.
25 opérations
include(Chaîne ai)

Inclut l'IA de nom ai dans l'IA courante. 

Attention, la fonction include doit être appelée uniquement dans le bloc principal, et son paramètre doit être une chaîne écrite directement dans le code. Pour plus d'informations, voir la section dans le tutoriel : http://leekwars.com/tutorial#includes.
Paramètres
ai : Le nom de l'IA à inclure.
1 opérations
jsonDecode(Chaîne json)	:	? object

Décode la chaîne json en objet LeekScript (nombre, chaîne, tableau...).
Paramètres
json : La chaîne JSON à décoder.
Retour
object : L'objet LeekScript décodé.
Opérations
variables
jsonEncode(Chaîne object)	:	Chaîne {json}

Encode l'objet object en chaîne JSON.
Paramètres
object : L'objet à encoder en JSON.
Retour
{json} : La chaîne encodée en JSON.
Opérations
variables
mark(? cells)	:	Booléen success

Marque une ou plusieurs cellules en noir sur le terrain pour 1 tour. Ce marquage n'est visible que par l'éleveur du poireau.
Paramètres
cells : La cellule ou tableau de plusieurs cellules à marquer
Retour
success : Retourne true si tout s'est bien déroulé
100 opérations
mark(? cells , Nombre color)	:	Booléen success

Marque une ou plusieurs cellules de la couleur indiquée en paramètre sur le terrain pour 1 tour. Ce marquage n'est visible que par l'éleveur du poireau.
Paramètres
cells : La cellule ou tableau de plusieurs cellules à marquer
color : Couleur du marquage
Retour
success : Retourne true si tout s'est bien déroulé
164 opérations
mark(? cells , Nombre color , Nombre duration)	:	Booléen success

Marque une ou plusieurs cellules de la couleur indiquée en paramètre sur le terrain pour le nombre de tour indiqué en paramètre. Ce marquage n'est visible que par l'éleveur du poireau.
Paramètres
cells : La cellule ou tableau de plusieurs cellules à marquer
color : Couleur du marquage
duration : Durée du marquage
Retour
success : Retourne true si tout s'est bien déroulé
164 opérations
pause()

Met en pause le combat, uniquement pour l'éleveur du poireau qui utilise la fonction.
30 opérations
setRegister(Chaîne key , Chaîne value)	:	Booléen success

Stocke la valeur value dans le registre de clé key. La clé et la valeur sont des chaînes qui doivent contenir respectivement 100 et 5000 caractères au maximum. Un poireau peut posséder au maximum 100 registres, le stockage dans un nouveau registre ne fonctionnera pas si tous les registres sont déjà occupés.
Paramètres
key : La clé du registre où stocker la valeur.
value : La valeur à stocker.
Retour
success : true si l'opération s'est bien passée, false sinon.
50 opérations
show(Nombre cell)	:	? null

Montre aux joueurs une cellule cell en noir sur le terrain pour 1 tour. L'utilisation de cette fonction coûte 1PT.
Paramètres
cell : La cellule à montrer
Retour
null : Retourne true si tout s'est bien déroulé
8 opérations
show(Nombre cell , Nombre color)	:	? null

Montre aux joueurs une cellule cell de la couleur color sur le terrain pour 1 tour. L'utilisation de cette fonction coûte 1PT.
Paramètres
cell : La cellule à montrer
color : Couleur du marquage
Retour
null : Retourne true si tout s'est bien déroulé
8 opérations
typeOf(? value)	:	Nombre type

Renvoie le type de la valeur value, parmis les types : TYPE_NULL, TYPE_NUMBER, TYPE_BOOLEAN, TYPE_STRING, #TYPE_ARRAY, TYPE_FUNCTION.
Paramètres
value : La valeur dont le type sera retourné.
Retour
type : Le type de value.
8 opérations
INSTRUCTIONS_LIMIT

Valeur
INSTRUCTIONS_LIMIT = 300000
OPERATIONS_LIMIT

Nombre d'opérations maximales qu'un poireau peut utiliser pendant son tour.
Valeur
OPERATIONS_LIMIT = 20000000
TYPE_ARRAY

Type de valeur tableau
Valeur
TYPE_ARRAY = 4
TYPE_BOOLEAN

Type de valeur booléen
Valeur
TYPE_BOOLEAN = 2
TYPE_FUNCTION

Type de valeur fonction
Valeur
TYPE_FUNCTION = 5
TYPE_NULL

Type de valeur null
Valeur
TYPE_NULL = 0
TYPE_NUMBER

Type de valeur nombre
Valeur
TYPE_NUMBER = 1
TYPE_STRING

Type de valeur chaîne de caractères
Valeur
TYPE_STRING = 3
getMessageAuthor(Tableau message)	:	Nombre leek

Renvoie l'id du poireau auteur du message message.
Paramètres
message : Le message dont l'auteur sera renvoyé.
Retour
leek : L'id du poireau auteur du message message.
5 opérations
getMessageParams(Tableau message)	:	? params

Renvoie le tableau des paramètres du message message.
Paramètres
message : Le message dont les paramètres seront renvoyés.
Retour
params : Les paramètres du message message.
5 opérations
getMessages()	:	TableauDeTableaux messages

Renvoie le tableau de vos messages.
Retour
messages : Le tableau de vos messages.
Un message est représenté lui-même sous la forme d'un tableau de la forme : [auteur, type, paramètres]
Les différents types de messages sont représentés par les constantes :
MESSAGE_HEAL : demande de soins
MESSAGE_ATTACK : demande d'attaquer
MESSAGE_BUFF_FORCE : demande de boost force
...
Opérations
variables
getMessages(Nombre leek)	:	TableauDeTableaux messages

Renvoie le tableau des messages du poireau leek.
Paramètres
leek : Le poireau dont les messages seront renvoyés.
Retour
messages : Le tableau des messages du poireau leek
Opérations
variables
getMessageType(Tableau message)	:	Nombre type

Renvoie le type du message message.
Paramètres
message : Le message dont le type sera renvoyé (parmis MESSAGE_HEAL, MESSAGE_ATTACK, etc.).
Retour
type : Le type du message message.
5 opérations
sendAll(Nombre type , ? params)

Envoie un message à toute votre équipe.
Paramètres
type : Le type du message à envoyer (voir les constantes MESSAGE_*).
params : Les paramètres du message, qui peuvent être n'importe quelle valeur.
40 opérations
sendTo(Nombre leek , Nombre type , ? params)	:	Booléen sent

Envoie un message au poireau d'id leek.
Paramètres
leek : L'id du poireau auquel sera envoyé le message.
type : Le type du message à envoyer (voir les constantes MESSAGE_*).
params : Les paramètres du message, qui peuvent être n'importe quelle valeur.
Retour
sent :
15 opérations
MESSAGE_ATTACK

Valeur
MESSAGE_ATTACK = 2
MESSAGE_BUFF_AGILITY

Valeur
MESSAGE_BUFF_AGILITY = 8
MESSAGE_BUFF_FORCE

Valeur
MESSAGE_BUFF_FORCE = 7
MESSAGE_BUFF_MP

Valeur
MESSAGE_BUFF_MP = 5
MESSAGE_BUFF_TP

Valeur
MESSAGE_BUFF_TP = 6
MESSAGE_CUSTOM

Valeur
MESSAGE_CUSTOM = 13
MESSAGE_DEBUFF

Valeur
MESSAGE_DEBUFF = 3
MESSAGE_HEAL

Valeur
MESSAGE_HEAL = 1
MESSAGE_MOVE_AWAY

Valeur
MESSAGE_MOVE_AWAY = 10
MESSAGE_MOVE_AWAY_CELL

Valeur
MESSAGE_MOVE_AWAY_CELL = 12
MESSAGE_MOVE_TOWARD

Valeur
MESSAGE_MOVE_TOWARD = 9
MESSAGE_MOVE_TOWARD_CELL

Valeur
MESSAGE_MOVE_TOWARD_CELL = 11
MESSAGE_SHIELD

Valeur
MESSAGE_SHIELD = 4
getBlue(Nombre color)	:	Nombre blue

Renvoie le taux de bleu dans la couleur color, entre 0 et 255. Par exemple, getBlue(COLOR_BLUE) = 255 et getBlue(COLOR_GREEN) = 0.
Paramètres
color : La couleur dont le taux de bleu sera renvoyé.
Retour
blue : Le taux de bleu dans la couleur color
10 opérations
getColor(Nombre red , Nombre green , Nombre blue)	:	Nombre color

Retourne l'entier correspondant à la couleur (red, green, blue) fournie en paramètres.
Paramètres
red : Valeur du rouge entre 0 et 255.
green : Valeur du vert entre 0 et 255.
blue : Valeur du bleu entre 0 et 255.
Retour
color : int correspondant à la couleur fournie en paramètre.
15 opérations
getGreen(Nombre color)	:	Nombre green

Renvoie le taux de vert dans la couleur color, entre 0 et 255. Par exemple, getGreen(COLOR_GREEN) = 255 et getGreen(COLOR_RED) = 0.
Paramètres
color : La couleur dont le taux de vert sera renvoyé.
Retour
green : Le taux de vert dans la couleur color
10 opérations
getRed(Nombre color)	:	Nombre red

Renvoie le taux de rouge dans la couleur color, entre 0 et 255. Par exemple, getRed(COLOR_RED) = 255 et getRed(COLOR_BLUE) = 0.
Paramètres
color : La couleur dont le taux de rouge sera renvoyé.
Retour
red : Le taux de rouge dans la couleur color
10 opérations
COLOR_BLUE

Couleur bleue.
Valeur
COLOR_BLUE = 255
COLOR_GREEN

Couleur verte.
Valeur
COLOR_GREEN = 65280
COLOR_RED

Couleur rouge.
Valeur
COLOR_RED = 16711680